<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Nginx php开发环境</title>
    <url>/2020/04/13/20200413_Docker%20Nginx%20php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>&emsp;&emsp;一些公司会统一开发环境，开发新员工入职第一天基本就是安装环境。这个事情都逃不掉。或者自己换了电脑。也是先安装环境。开发环境这东西虽然不是天天去部署。但是熟练部署差不多也要一个小时折腾（web服务器，数据库，缓存。配置文件修改，端口修改等）。因此我们可以把开发环境部署到docker里面，然后打包成镜像。发布到自己的Docker Hub。以后不管是自己使用还是给别人使用，都是一行命就搞定了。因为部署出来的环境都是一模一样的，也能避免开发中一些环境配置不一样造成的坑。</p>
<ul>
<li>原理说明<br>进入一个系统根据自己的需要安装软件，将配置好的环境打包成镜像，需要的时候直接启用，复制给别人也能直接启用。（虚拟化技术，简单讲类似虚拟机，但是没有虚拟机那样虚拟出整个独立环境）<a id="more"></a></li>
<li>实现步奏<br>打包自己的虚拟环境》上传至docker hub 》拉取镜像使用</li>
</ul>
<p><strong>我自己用Nginx-php开发环境做案例</strong><br>新建一个docker-php7.2目录，在docker目录下完成。（自己可以随便自定义目录）<br>这里是我做好的环境，可以直接拉取使用<a href="https://github.com/thuol/docker-php7.2" target="_blank" rel="noopener">https://github.com/thuol/docker-php7.2</a></p>
<h1 id="打包自己的docker镜像并上传"><a href="#打包自己的docker镜像并上传" class="headerlink" title="打包自己的docker镜像并上传"></a>打包自己的docker镜像并上传</h1><ul>
<li><p>安装docker<br>Docker 官网图形化安装 <a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p>
</li>
<li><p>创建Dockerfile<br>Dockerfile 文件是生成自定义环境必备的。里面记录了对环境的自定义过程。<br>新建一个build目录，在里面创建<code>Dockerfile</code>文件<br>使用centos7.3 做为底层，安装nginx 和php 然后更改相关配置（我直接把编辑好的配置文件复制到docker里面，自己也可以根据情况再编辑），编辑启动命令（需要后台启动）</p>
</li>
</ul>
<p><strong>Dockerfile</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos:7.3.1611</span><br><span class="line"></span><br><span class="line"># 初始安装</span><br><span class="line">RUN yum install epel-release -y &amp;&amp;\</span><br><span class="line">    rpm -Uvh https:&#x2F;&#x2F;mirror.webtatic.com&#x2F;yum&#x2F;el7&#x2F;webtatic-release.rpm &amp;&amp;\</span><br><span class="line">    rpm -ivh http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;noarch&#x2F;RPMS&#x2F;nginx-release-centos-7-0.el7.ngx.noarch.rpm &amp;&amp;\</span><br><span class="line">    yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel &amp;&amp;\</span><br><span class="line">    yum install -y vim tar wget curl bzip2 net-tools lsof sysstat cronie python-setuptools &amp;&amp;\</span><br><span class="line">    yum install pcre pcre-devel -y &amp;&amp;\</span><br><span class="line">    yum -y install nginx-1.12.2 &amp;&amp;\</span><br><span class="line">    yum install php72w php72w-cli php72w-common php72w-fpm php72w-bcmath php72w-gd php72w-mbstring php72w-pdo php72w-mysqlnd php72w-mcrypt php72w-devel -y</span><br><span class="line">RUN mkdir &#x2F;wwwroot</span><br><span class="line"></span><br><span class="line"># 拷贝配置文件</span><br><span class="line">#ADD conf&#x2F;nginx&#x2F;default.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line">ADD conf&#x2F;php&#x2F;php-fpm.conf &#x2F;etc&#x2F;php-fpm.conf</span><br><span class="line">ADD conf&#x2F;php&#x2F;www.conf &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line">ADD conf&#x2F;php&#x2F;php.ini &#x2F;etc&#x2F;php.ini</span><br><span class="line">ADD conf&#x2F;php&#x2F;extensions&#x2F;redis.so &#x2F;usr&#x2F;lib64&#x2F;php&#x2F;modules&#x2F;redis.so</span><br><span class="line"></span><br><span class="line"># 拷贝启动脚本</span><br><span class="line">ADD start.sh &#x2F;start.sh</span><br><span class="line">RUN chmod 775 &#x2F;start.sh</span><br><span class="line"></span><br><span class="line"># 启动程序</span><br><span class="line">#CMD [&quot;php-fpm -D&quot;]</span><br><span class="line">#CMD [&quot;nginx&quot;]</span><br><span class="line">#RUN php-fpm -D</span><br><span class="line">#RUN nginx -g &quot;daemon off;&quot;</span><br><span class="line"></span><br><span class="line">CMD [&quot;&#x2F;start.sh&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>start.sh</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">php-fpm -D</span><br><span class="line">nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM      引用做为底层系统</span><br><span class="line">RUN       执行命令（相当于在系统内执行命令）</span><br><span class="line">ADD       将本地文件复制到docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包上传<br>首先要有个docker账号。可以到官网申请  ，申请后登录。<br>创建一个Repository，我用自己的账号举例。<br><img src="https://upload-images.jianshu.io/upload_images/4830242-dee76c88cd797fbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建一个Repository"></p>
</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-7bc4e46c09236f4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建一个Repository，这里用自己的名字"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 登录</span><br><span class="line">docker login  </span><br><span class="line"># 打包镜像，冒号前面的是刚才创建的名字，冒号后面的是自己打包的标记，这个标记根据自己情况来起名</span><br><span class="line">docker build -t tianhuo&#x2F;web:php72 .    #最后面这个 . 别忘了是在当前目录下找Dockerfile配置文件</span><br><span class="line"># 上传镜像</span><br><span class="line">docker push tianhuo&#x2F;web:php72</span><br></pre></td></tr></table></figure>

<h1 id="创建启动配置文件"><a href="#创建启动配置文件" class="headerlink" title="创建启动配置文件"></a>创建启动配置文件</h1><ul>
<li>新建docker-compose.yml文件<br>新建目录php72 在里面新建docker-compose.yml文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line">#代码目录请在.env 文件中配置</span><br><span class="line">services:</span><br><span class="line">  testaa:</span><br><span class="line">    image: &#39;tianhuo&#x2F;web:php72&#39;</span><br><span class="line">    container_name: tweb</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">    volumes:</span><br><span class="line">      - $&#123;coderoot&#125;:&#x2F;wwwroot</span><br><span class="line">      - $&#123;nginx_config&#125;:&#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br></pre></td></tr></table></figure></li>
<li>配置说明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">image                使用的镜像</span><br><span class="line">container_name       启动后容器的名称</span><br><span class="line">ports                映射的端口</span><br><span class="line">volumes              映射的目录</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>.env</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#默认代码所在的地址,可以是目录 注意这个目录是你本地的代码目录  会映射到docker 中的 &#x2F;wwwroot 目录下</span><br><span class="line">coderoot&#x3D;~&#x2F;www</span><br><span class="line"></span><br><span class="line">#nginx的服务配置目录,本地映射到docker 中的 &#x2F;etc&#x2F;nginx&#x2F;conf.d, 增加配置后要重启</span><br><span class="line">nginx_config&#x3D;.&#x2F;nginx</span><br></pre></td></tr></table></figure>


<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li><p>更改项目配置<br>更改.env 文件中的对应目录，改成自己本地的，nginx_config里面配置的信息和本地nginx配置一样<br>我的nginx配置目录如下，nginx配置信息和本地一样。就是把nginx.conf 映射到容器里面了<br><img src="https://upload-images.jianshu.io/upload_images/4830242-530e59d6a0c02cfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>启动<br>进入php72（和docker-compose.yml同目录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up       # 启动</span><br><span class="line">docker-compose up -d    # 后台启动</span><br><span class="line">docker-compose restart  # 重启</span><br><span class="line">docker-compose stop     # 停止</span><br></pre></td></tr></table></figure>
<p>如果要进入容器进行操作修改，参考<a href="https://www.jianshu.com/p/16f87cbfbde8" target="_blank" rel="noopener">docker基本操作命令</a><a href="https://www.jianshu.com/p/16f87cbfbde8" target="_blank" rel="noopener">https://www.jianshu.com/p/16f87cbfbde8</a></p>
</li>
<li><p>测试<br>默认是将本地8080端口映射到容器里面的80端口<br>在本地项目根目录下放一个phpinfo做测试<br><img src="https://upload-images.jianshu.io/upload_images/4830242-a19336504e3ac5f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试"><br>这样就通过docker打包一个自己的nginx-php环境。代码在本地该怎么写还怎么写。以后给别人搭建和自己一样的环境，只需要安装docker 将php72 里面的东西给别人，直接启动就可以了（别人不需要打包的过程直接使用自己打包好的镜像）。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker基本操作命令</title>
    <url>/2020/04/08/20200408_docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>这几个操作命令是我最近用到的。具体参数可以查看官方文档。</p>
<blockquote>
<p><a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官方文档：</a><a href="https://docs.docker.com" target="_blank" rel="noopener">https://docs.docker.com</a></p>
</blockquote>
<p><strong>镜像</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地镜像列表：docker images</span><br><span class="line">拉取新镜像：docker pull ubuntu:13.10</span><br><span class="line">删除镜像：docker rmi hello-world</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成并进入容器：docker run -ti ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br><span class="line">查看当前运行容器：docker ps </span><br><span class="line">查看所有运行容器：docker ps -a</span><br><span class="line">启动已停止的容器：docker start b750bbbcfd88</span><br><span class="line">停止的容器：docker stop b750bbbcfd88</span><br><span class="line">重启的容器：docker restart b750bbbcfd88</span><br><span class="line">进入已启动的容器：docker exec -it &#123;name&#125; sh</span><br><span class="line">删除容器：docker rm -f 1e560fca3906</span><br></pre></td></tr></table></figure>
<p><strong>docker-compose</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后台启动：docker-compose up -d</span><br><span class="line">停止容器：docker-compose stop</span><br></pre></td></tr></table></figure>
<p><strong>容器与主机之间数据拷贝</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从主机往容器中拷贝：docker cp &#x2F;www&#x2F;runoob 96f7f14e99ab:&#x2F;www&#x2F;</span><br><span class="line">从容器往主机中拷贝：docker cp  96f7f14e99ab:&#x2F;www &#x2F;tmp&#x2F;  &#x2F;www</span><br></pre></td></tr></table></figure>
<p><strong>打包自定义容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成镜像：docker build -t name:v1 .   </span><br><span class="line">上传镜像：docker push name:v1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建私有NPM服务（cnpm）</title>
    <url>/2019/08/22/20190822_%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89NPM%E6%9C%8D%E5%8A%A1%EF%BC%88cnpm%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>亲测原稿,系统CentOS 7.3<br>在一些企业中，内部开发的组件经常在多个项目中使用。车辆千千万，轮子只有一种。为了避免重复造轮子的过程。大多数就把项目发布到npm服务器。但是企业中很多东西不开源，就只有自己动手搭建npm服务器了。</p>
<a id="more"></a>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote>
<p>项目地址 ：<a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="noopener">https://github.com/cnpm/cnpmjs.org</a><br>  需要MySql：<a href="https://www.jianshu.com/p/9b46d915692e" target="_blank" rel="noopener">MySql安装教程,其他服务器上的MySql也行</a><br>  需要Node，NPM：<a href="https://www.jianshu.com/p/f3e5a92cefb2" target="_blank" rel="noopener">Node.js安装教程</a></p>
</blockquote>
<p><strong>防火墙开启端口（服务默认使用7001和7002）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;7001&#x2F;tcp --permanent    #添加开启端口，要开启7001；7002；端口</span><br><span class="line">systemctl restart firewalld.service                           #重启防火墙</span><br><span class="line">systemctl stop firewalld                                      #禁用防火墙(防火墙全部关闭)</span><br></pre></td></tr></table></figure>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>将软件包下载到服务器自定义路径（例：/www）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;cnpm&#x2F;cnpmjs.org.git</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-fb8b466614eebb87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>直接下载好ftp上传到服务器也行</p>
<h1 id="创建数据库（没有mysql的先搞定sql）"><a href="#创建数据库（没有mysql的先搞定sql）" class="headerlink" title="创建数据库（没有mysql的先搞定sql）"></a>创建数据库（没有mysql的先搞定sql）</h1><p>拉取的代码中 docs/db.sql就是建表sql ，自行导入建表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database cnpmjs; </span><br><span class="line">use cnpmjs;</span><br><span class="line">source docs&#x2F;db.sql;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-5f99ff1b5b1f9cb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建cnpm数据库"></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>下载好 cnpmjs.org<br>进入 cnpmjs.org/config 目录创建 config.js （默认只有一个index.js,创建config.js后会优先使用里面的配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;cnpmjs.org&#x2F;config </span><br><span class="line">vi config.js</span><br></pre></td></tr></table></figure>
<p>写入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    debug: false,</span><br><span class="line">    database: &#123;</span><br><span class="line">        db: &#39;cnpmjs&#39;,         		&#x2F;&#x2F; 数据库名</span><br><span class="line">        host: &#39;127.0.0.1&#39;,          &#x2F;&#x2F; 服务器地址</span><br><span class="line">        port: 3306,                 &#x2F;&#x2F; 端口</span><br><span class="line">        username: &#39;testuser&#39;,       &#x2F;&#x2F; 用户名</span><br><span class="line">        password: &#39;123456&#39;,         &#x2F;&#x2F; 密码</span><br><span class="line">        dialect: &#39;mysql&#39;            &#x2F;&#x2F; 使用mysql，默认为sqlite, 还支持postgres,mariadb,暂时不支持oracle</span><br><span class="line">    &#125;,</span><br><span class="line">    enablePrivate: true, 			&#x2F;&#x2F; 只有管理员可以发布 npm 包，默认为 false，即任何人都可以发布包</span><br><span class="line">    admins: &#123;</span><br><span class="line">      admin: &#39;admin@thuol.com&#39;  	&#x2F;&#x2F; 管理员权限 邮箱</span><br><span class="line">    &#125;,</span><br><span class="line">    scopes: [&#39;@thuol&#39;], 	  		&#x2F;&#x2F; 私有包必须依附于 scope 下</span><br><span class="line">    syncModel: &#39;exist&#39;         		&#x2F;&#x2F; 同步已存在的模块, 默认为 none即不同步,exist只会同步已存在的模块，还有个选项为all，同步所有模块（如果设置了同步。硬盘可能被塞满）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>更改index.js中参数<br>registryHost 更改成你自己服务器ip（或者域名）加相应的端口默认7001端口，否则拉包可能失败（拉包时域名指向不对），约在第162行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; registry url name</span><br><span class="line">  &#x2F;&#x2F;registryHost: &#39;r.cnpmjs.org&#39;,      &#x2F;&#x2F;默认值</span><br><span class="line">  registryHost: &#39;192.168.220.128:7001&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * registry mode config</span><br><span class="line">   *&#x2F;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-3bbbeccb0a8d06f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>注释 bindingHost 这行否则其他电脑无法访问 约在第31行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registryPort: 7001,</span><br><span class="line">webPort: 7002,</span><br><span class="line">&#x2F;&#x2F; bindingHost: &#39;127.0.0.1&#39;, &#x2F;&#x2F; only binding on 127.0.0.1 for local access</span><br><span class="line">&#x2F;&#x2F; default is ctx.protocol</span><br><span class="line">protocol: &#39;&#39;,</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-e7e8d6eead1ca37d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>cnpm 默认的两个访问端口是：</p>
<p>1) 7001是 registry 端口，对应 registryPort 配置项<br>2) 7002是 web 端口，对应 webPort 配置项<br><strong>如果config.js中syncModel 设置为none，拉取共有的包需要更改，sourceNpmRegistry参数,约197行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; sync source, upstream registry</span><br><span class="line">&#x2F;&#x2F; If you want to directly sync from official npm&#39;s registry</span><br><span class="line">&#x2F;&#x2F; please drop them an email first</span><br><span class="line">&#x2F;&#x2F; sourceNpmRegistry: &#39;https:&#x2F;&#x2F;registry.npm.taobao.org&#39;,</span><br><span class="line">   sourceNpmRegistry: &#39;http:&#x2F;&#x2F;192.168.220.128:7001&#39;,    &#x2F;&#x2F;共有包地址</span><br><span class="line">   sourceNpmWeb: &#39;https:&#x2F;&#x2F;npm.taobao.org&#39;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; upstream registry is base on cnpm&#x2F;cnpmjs.org or not</span><br><span class="line">&#x2F;&#x2F; if your upstream is official npm registry, please turn it off</span><br><span class="line">  sourceNpmRegistryIsCNpm: true,</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-18aeb0fa44813b10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h1><p><strong>安装</strong><br>进入项目目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;cnpmjs.org</span><br><span class="line">npm install </span><br><span class="line">npm start &#x2F;&#x2F; 启动cnpm服务</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-bb90f4d51b53c8f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>如果提示如下错误，先升级npm再安装</strong><br><img src="https://upload-images.jianshu.io/upload_images/4830242-c506fe7ffd6b5146.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>关闭</strong><br>简单粗暴的方法，启动时有进程 PID，直接结束进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antpl           #查看端口占用情况，7001和7002是是该程序</span><br><span class="line">kill 3272                #结束掉相应的进程</span><br></pre></td></tr></table></figure>

<p><strong>测试是否启动</strong><br>浏览器里访问一下加端口7001和7002出现如下，正常启动<br><img src="https://upload-images.jianshu.io/upload_images/4830242-c11fddb10aff5573.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/4830242-4e54ed61faa50777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="上传npm包到私有cnpm服务器"><a href="#上传npm包到私有cnpm服务器" class="headerlink" title="上传npm包到私有cnpm服务器"></a>上传npm包到私有cnpm服务器</h1><p>服务器启动成功后，客户端就可以通过其他机器进行npm包的上传了<br>客户端进入需要发布的项目目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm login --registry&#x3D;http:&#x2F;&#x2F;192.168.220.128:7001      #登录npm 使用私有服务器地址</span><br><span class="line">#########</span><br><span class="line">##   账号:admin ，（之前config.js配置的账号）</span><br><span class="line">##   密码（首次随意输入）</span><br><span class="line">##   邮箱:admin@thuol.com（之前config.js配置的邮箱）</span><br><span class="line">#########</span><br><span class="line">npm publish --registry&#x3D;http:&#x2F;&#x2F;192.168.220.128:7001    #发布npm包到私有服务器</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-51b85fd96d03228f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/4830242-cf6d7dc46d26dc60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>发布成功可以在  域名（ip）+7002端口中查到<br><img src="https://upload-images.jianshu.io/upload_images/4830242-92f9226ebb8b7a8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="从私有cnpm服务器安装npm包"><a href="#从私有cnpm服务器安装npm包" class="headerlink" title="从私有cnpm服务器安装npm包"></a>从私有cnpm服务器安装npm包</h1><p>正常使用后面加上npm私服地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install myvue --registry&#x3D;http:&#x2F;&#x2F;192.168.220.128:7001</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-22907963cb8f2f28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="nrm管理多个源"><a href="#nrm管理多个源" class="headerlink" title="nrm管理多个源"></a>nrm管理多个源</h1><p>客户端每次安装私服npm包都需要 带一长串   –registry=http://………………比较麻烦，解决这问题可以使用nrm工具进行管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g nrm          #安装nrm</span><br><span class="line">nrm add sifu http:&#x2F;&#x2F;192.168.220.128:7001  #添加私服地址</span><br><span class="line">nrm use sifu          #设置使用私服地址(sifu)</span><br><span class="line"></span><br><span class="line">npm install myvue     #直接使用安装</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/4830242-773b7d60d3549b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>MAC读写NTFS格式文件（原生读写，不需要任何软件）</title>
    <url>/2017/09/01/20170901_MAC%E8%AF%BB%E5%86%99NTFS%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%EF%BC%88%E5%8E%9F%E7%94%9F%E8%AF%BB%E5%86%99%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BB%BB%E4%BD%95%E8%BD%AF%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>从win切换到mac免不了文件迁移问题。硬盘在win下的常用格式为NTFS。但是MAC 下对于NTFS硬盘只能读不能直接写入的。（以前可以，现在不行。原因自己脑补）。又不能把硬盘格式化成MAC 能识别的格式。（格式化后硬盘里内容就没了。格式化后win不认Mac的硬盘格式）</p>
<a id="more"></a>
<h4 id="亲身入坑"><a href="#亲身入坑" class="headerlink" title="亲身入坑"></a>亲身入坑</h4><p>就需要借助第三方软件（不提名了，不想动手操作的人，自己百度。很多类似软件，但是都要钱）。刚开使用一款软件挺好用的（破解版的），用了两个月突然弹窗告诉我需要激活。。（破解的人技术没到家？搞得限时破解？不管什么原因不能用了。）<br>因为自己需要读写NTFS格式的移动硬盘，就找了很多这个软件的其他破解版本。结果都不好用<em>（也怪自己只想着这个软件的破解版了。其实需求不是这个软件而是让MAC可以读写NTFS格式的硬盘）</em> 只能忍痛花了140+大洋买了正版授权。<em>当年用win系统时有需要掏钱的软件？</em><br>上午付完钱，中午午就看到一篇文章（亲测可用【测试机上没有安装读写ntfs的第三方软件】，140+块大洋啊。。。）。</p>
<h4 id="MAC原生读取NTFS格式文件方法"><a href="#MAC原生读取NTFS格式文件方法" class="headerlink" title="MAC原生读取NTFS格式文件方法"></a>MAC原生读取NTFS格式文件方法</h4><p><strong>打开终端</strong></p>
<ol>
<li><p>切换至root身份,有密码输入密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure></li>
<li><p>进入/sbin目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;sbin</span><br></pre></td></tr></table></figure></li>
<li><p>将系统自带的挂载程序改名，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv mount_ntfs mount_ntfs_orig</span><br></pre></td></tr></table></figure>
<p>如果遇到报错：<code>mv: rename mount_ntfs to mount_ntfs_orig: Operation not permitted.</code><br>可以重启mac，按住command+R 进入恢复（recovery）模式找到 终端（在“实用工具”里面）<br>关闭安全限制：<code>csrutil disable</code><br>然后重启：<code>reboot</code> 从第1步重来</p>
</li>
<li><p>改完名后，编写脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi mount_ntfs</span><br></pre></td></tr></table></figure>
<p>按i开始编辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F;sbin&#x2F;mount_ntfs_orig -o rw,nobrowse &quot;$@&quot;;</span><br><span class="line">cd &#x2F;Volumes&#x2F;(你的盘符名字);</span><br><span class="line">find . -exec xattr -c &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>然后保存，按esc后输入:wq后回车</p>
</li>
<li><p>修改挂载文件权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod a+x mount_ntfs</span><br></pre></td></tr></table></figure>
<p>退出root：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li>
<li><p>由于新挂载的ntfs盘不能显示在Finder中，所以打开Finder前往文件夹 /Volumes，然后在用 cmmand+control+T 将 /Volumes 保存到边栏，在插入移动设备后不会在桌面显示，可以在Finder边栏的Volumes中查看。</p>
</li>
</ol>
<p><strong>macOS高版本好像没这个问题。和正常使用一样，把硬盘插上去就可以读写了。（我没做这一步，做完第5步插上移动硬盘就能用了）</strong></p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
  </entry>
  <entry>
    <title>Mac 开启允许任何来源安装应用（安装包损坏问题）</title>
    <url>/2017/09/01/20170901_Mac%20%E5%BC%80%E5%90%AF%E5%85%81%E8%AE%B8%E4%BB%BB%E4%BD%95%E6%9D%A5%E6%BA%90%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%EF%BC%88%E5%AE%89%E8%A3%85%E5%8C%85%E6%8D%9F%E5%9D%8F%E9%97%AE%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<p>在mac中安装破解软件经常会遇到安装包损坏问题，其实大多数是因为这个安装包被修改过（被破解），但是没有得到认证。所以系统不允许安装。但是发现系统只有App Store 和认可的开发者来源的软件才能安装。是因为任何来源的选项被隐藏了（以前是有任何来源的选项，隐藏原因自己脑补）。</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-d15eca70090d039d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>显示”任何来源”选项在终端中执行（有密码输入密码）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<p>不显示”任何来源”选项（macOS 10.12默认为不显示）在终端中执行（有密码输入密码）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-enable</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4830242-578f09f1cc0a8f68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
  </entry>
  <entry>
    <title>Mac “永久” 隐藏Dock</title>
    <url>/2017/09/01/20170901_Mac%20%E2%80%9C%E6%B0%B8%E4%B9%85%E2%80%9D%20%E9%9A%90%E8%97%8FDock/</url>
    <content><![CDATA[<p>macOS系统的dock默认是永久显示在桌面下方的。也不知道怎么想的这个设计，当最大化窗口时，dock左右两侧会浪费掉一部分空间。整个桌面也不看好。</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-f75f503a72aab6d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>对于强迫症怎能行。必须全屏，全屏。（macOS系统可以设置自动隐藏dock），设置自动隐藏dock后，当鼠标滑动到底部时dock会自动显示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-65216594c36d337c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>滑动到底部会有一个停留时间才会显示。系统默认好像是1秒。这个停留时间是可以调整的。有的人想要马上显示（设置成0秒），对于我来说鼠标移动到底部就显示，会有误触情况。我需要永久隐藏所以设置时间为10秒（甚至更长）。（当需要马上使用dock时怎么办，继续往下看。。。）</p>
<h4 id="设置dock显示时间命令"><a href="#设置dock显示时间命令" class="headerlink" title="设置dock显示时间命令"></a>设置dock显示时间命令</h4><p>打开终端输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#先修改停留时间（后面数字为停留时间）如：</span><br><span class="line">defaults write com.apple.dock autohide-delay -int 0      ##（时间设为最短）</span><br><span class="line">defaults write com.apple.dock autohide-delay -int 0.5    ##（时间设为 0.5s）</span><br><span class="line">defaults write com.apple.dock autohide-delay -int 10     ##（时间设为 10s）</span><br><span class="line">#使设置生效</span><br><span class="line">killall Dock</span><br></pre></td></tr></table></figure>

<p>当需要马上使用dock时可以打开Launchpad当Launchpad开启时dock是显示状态的。系统偏好设置中有个触发角的设置。可以将鼠标移动到桌面四角中任一一个时出发Launchpad(鼠标移动到一个角比移动到一个边的误触几率小多了)。系统默认五指抓触摸板也是打开Launchpad。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-4f5c46dd8c8dc019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-88b149ad3cae6d7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-9780565fd86571c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
  </entry>
  <entry>
    <title>Mongodb安装与基础配置(centos7)</title>
    <url>/2017/05/03/20170503_Mongodb%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE(centos7)/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本教程使用软件,使用默认端口，（需要开启27017端口）</p>
<blockquote>
<p>mongodb-linux-x86_64-rhel70-3.4.4.tgz<br>Mongodb官网：<a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a><br>下载地址：<a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.4.4.tgz" target="_blank" rel="noopener">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.4.4.tgz</a></p>
</blockquote>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>创建数据目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;db</span><br><span class="line">chmod -R 777 &#x2F;data</span><br></pre></td></tr></table></figure>

<p>下载mogodb到自己喜欢的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;fastdl.mongodb.org&#x2F;linux&#x2F;mongodb-linux-x86_64-rhel70-3.4.4.tgz</span><br></pre></td></tr></table></figure>

<p>解压并进入bin目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-rhel70-3.4.4.tgz</span><br><span class="line">cd mongodb-linux-x86_64-rhel70-3.4.4&#x2F;</span><br><span class="line">cd bin</span><br></pre></td></tr></table></figure>
<p>启动Mongodb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mongod</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-a2fd54fd3cfe822c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>测试<br>这个时候发现不是后台启动（不能关闭），<strong>可以另外开启一个ssh进行测试。</strong><br>打开mongo（和上一个命令不一样，没有最后面的d）进入MongoDB后台管理 Shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mongo</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-25436223f84d5ab7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="带参数后台启动Mongodb"><a href="#带参数后台启动Mongodb" class="headerlink" title="带参数后台启动Mongodb"></a>带参数后台启动Mongodb</h1><ol>
<li>配置文件方式启动mongo<br>创建配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi mongodb.cnf</span><br></pre></td></tr></table></figure>
输入以下内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbpath&#x3D;&#x2F;data&#x2F;db&#x2F;                   </span><br><span class="line">logpath&#x3D;&#x2F;data&#x2F;db&#x2F;mongo.log</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">fork&#x3D;true</span><br><span class="line">port&#x3D;27017</span><br></pre></td></tr></table></figure>
启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mongod -f .&#x2F;mongodb.cnf</span><br></pre></td></tr></table></figure></li>
<li>不创建配置文件通过mongod参数启动也可以<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mongod -dbpath &#x2F;data&#x2F;db&#x2F; -logpath &#x2F;data&#x2F;db&#x2F;mongo.log -logappend -fork -port 27017</span><br></pre></td></tr></table></figure></li>
<li>参数说明（参考使用）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--quiet	# 安静输出</span><br><span class="line">--port arg	# 指定服务端口号，默认端口27017</span><br><span class="line">--bind_ip arg	# 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class="line">--logpath arg	# 指定MongoDB日志文件，注意是指定文件不是目录</span><br><span class="line">--logappend	# 使用追加的方式写日志</span><br><span class="line">--pidfilepath arg	# PID File 的完整路径，如果没有设置，则没有PID文件</span><br><span class="line">--keyFile arg	# 集群的私钥的完整路径，只对于Replica Set 架构有效</span><br><span class="line">--unixSocketPrefix arg	# UNIX域套接字替代目录,(默认为 &#x2F;tmp)</span><br><span class="line">--fork	# 以守护进程的方式运行MongoDB，创建服务器进程</span><br><span class="line">--auth	# 启用验证</span><br><span class="line">--cpu	# 定期显示CPU的CPU利用率和iowait</span><br><span class="line">--dbpath arg	# 指定数据库路径</span><br><span class="line">--diaglog arg	# diaglog选项 0&#x3D;off 1&#x3D;W 2&#x3D;R 3&#x3D;both 7&#x3D;W+some reads</span><br><span class="line">--directoryperdb	# 设置每个数据库将被保存在一个单独的目录</span><br><span class="line">--journal	# 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里</span><br><span class="line">--journalOptions arg	# 启用日志诊断选项</span><br><span class="line">--ipv6	# 启用IPv6选项</span><br><span class="line">--jsonp	# 允许JSONP形式通过HTTP访问（有安全影响）</span><br><span class="line">--maxConns arg	# 最大同时连接数 默认2000</span><br><span class="line">--noauth	# 不启用验证</span><br><span class="line">--nohttpinterface	# 关闭http接口，默认关闭27018端口访问</span><br><span class="line">--noprealloc	# 禁用数据文件预分配(往往影响性能)</span><br><span class="line">--noscripting	# 禁用脚本引擎</span><br><span class="line">--notablescan	# 不允许表扫描</span><br><span class="line">--nounixsocket	# 禁用Unix套接字监听</span><br><span class="line">--nssize arg (&#x3D;16)	# 设置信数据库.ns文件大小(MB)</span><br><span class="line">--objcheck	# 在收到客户数据,检查的有效性，</span><br><span class="line">--profile arg	# 档案参数 0&#x3D;off 1&#x3D;slow, 2&#x3D;all</span><br><span class="line">--quota	# 限制每个数据库的文件数，设置默认为8</span><br><span class="line">--quotaFiles arg	# number of files allower per db, requires --quota</span><br><span class="line">--rest	# 开启简单的rest API</span><br><span class="line">--repair	# 修复所有数据库run repair on all dbs</span><br><span class="line">--repairpath arg	# 修复库生成的文件的目录,默认为目录名称dbpath</span><br><span class="line">--slowms arg (&#x3D;100)	# value of slow for profile and console log</span><br><span class="line">--smallfiles	# 使用较小的默认文件</span><br><span class="line">--syncdelay arg (&#x3D;60)	# 数据写入磁盘的时间秒数(0&#x3D;never,不推荐)</span><br><span class="line">--sysinfo	# 打印一些诊断系统信息</span><br><span class="line">--upgrade	# 如果需要升级数据库</span><br></pre></td></tr></table></figure>
Replicaton 参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--fastsync	# 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步</span><br><span class="line">--autoresync	# 如果从库与主库同步数据差得多，自动重新同步，</span><br><span class="line">--oplogSize arg	# 设置oplog的大小(MB)</span><br></pre></td></tr></table></figure>
主/从参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--master	# 主库模式</span><br><span class="line">--slave	# 从库模式</span><br><span class="line">--source arg	# 从库 端口号</span><br><span class="line">--only arg	# 指定单一的数据库复制</span><br><span class="line">--slavedelay arg	# 设置从库同步主库的延迟时间</span><br></pre></td></tr></table></figure>
Replica set(副本集)选项：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--replSet arg	# 设置副本集名称</span><br></pre></td></tr></table></figure>
Sharding(分片)选项<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--configsvr	# 声明这是一个集群的config服务,默认端口27019，默认目录&#x2F;data&#x2F;configdb</span><br><span class="line">--shardsvr	# 声明这是一个集群的分片,默认端口27018</span><br><span class="line">--noMoveParanoia	# 关闭偏执为moveChunk数据保存</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="给数据库创建密码"><a href="#给数据库创建密码" class="headerlink" title="给数据库创建密码"></a>给数据库创建密码</h1><ol>
<li>进入客户端<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mongo</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-586a746042ed2bab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>进入想要加密码的数据库（本文以tesataa数据库为例）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use tesataa</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-e30a98ba6ace6e31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>为单个数据库添加用户（用户名为useraa,密码为123456）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;user:&quot;useraa&quot;,pwd:&quot;123456&quot;,roles:[&#123;role:&quot;dbOwner&quot;,db:&quot;tesataa&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-794610bc119f1678.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
<p><strong>db.createUser()参数说明</strong> <em>(作为配置参考)</em><br><a href="https://docs.mongodb.com/manual/reference/method/db.createUser/" target="_blank" rel="noopener">官方文档地址：https://docs.mongodb.com/manual/reference/method/db.createUser/</a><br>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">      user: &quot;&lt;name&gt;&quot;,</span><br><span class="line">      pwd: &quot;&lt;cleartext password&gt;&quot;,</span><br><span class="line">      customData: &#123; &lt;any information&gt; &#125;,</span><br><span class="line">      roles: [</span><br><span class="line">        &#123; role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; &#125; | &quot;&lt;role&gt;&quot;,</span><br><span class="line">      ...</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>user文档字段介绍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user字段，为新用户的名字；   </span><br><span class="line">pwd字段，用户的密码；    </span><br><span class="line">cusomData字段，为任意内容，例如可以为用户全名介绍；    </span><br><span class="line">roles字段，指定用户的角色，可以用一个空数组给新用户设定空角色；    </span><br><span class="line">在roles字段,可以指定内置角色和用户定义的角色。</span><br></pre></td></tr></table></figure>
<p>Built-In Roles（<a href="http://docs.mongodb.org/manual/reference/built-in-roles/#built-in-roles" target="_blank" rel="noopener">内置角色</a>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.数据库用户角色：read、readWrite; </span><br><span class="line">2.数据库管理角色：dbAdmin、dbOwner、userAdmin；    </span><br><span class="line">3.集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</span><br><span class="line">4.备份恢复角色：backup、restore；</span><br><span class="line">5.所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</span><br><span class="line">6.超级用户角色：root    &#x2F;&#x2F; 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</span><br><span class="line">7.内部角色：__system   &#x2F;&#x2F;关于每个角色所拥有的操作权限可以点击上面的内置角色链接查看详情。</span><br></pre></td></tr></table></figure>
<p>writeConcern文档（<a href="http://docs.mongodb.org/manual/reference/write-concern/" target="_blank" rel="noopener">官方说明</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">w选项：允许的值分别是 1、0、大于1的值、&quot;majority&quot;、&lt;tag set&gt;；  </span><br><span class="line">j选项：确保mongod实例写数据到磁盘上的journal（日志），这可以确保mongd以外关闭不会丢失数据。设置true启用。    </span><br><span class="line">wtimeout：指定一个时间限制,以毫秒为单位。wtimeout只适用于w值大于1。</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>关闭mongodb 并带认证重启mongodb（本次使用非配置文件启动，自己可写入配置文件里）<br>查看进程并使用kill 结束和mongodb有关的进程<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antpl</span><br></pre></td></tr></table></figure>
带认证的启动mongodb(-auth 开启密码认证)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mongod -dbpath &#x2F;data&#x2F;db&#x2F; -logpath &#x2F;data&#x2F;db&#x2F;mongo.log -logappend -fork -port 27017 -auth</span><br></pre></td></tr></table></figure>
测试（我之前就在tesataa数据库里面加了一个col集合并添加了一条数据，mongodb增，删，改，查等操作命令本文不做具体解释）<br>使用密码登录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.auth(&quot;useraa&quot;,&quot;123456&quot;)</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-aec9d752c7dfaac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
<h1 id="使用mongodb管理工具（Robomong）"><a href="#使用mongodb管理工具（Robomong）" class="headerlink" title="使用mongodb管理工具（Robomong）"></a>使用mongodb管理工具（Robomong）</h1><p><img src="http://upload-images.jianshu.io/upload_images/4830242-2cd0e344084f065a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-ac571fd7d6964697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-6a80d65f9a531866.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-18827b24870ade18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 安装配置（centos7）</title>
    <url>/2017/05/02/20170502_Node.js%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%EF%BC%88centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本教程使用软件</p>
<blockquote>
<p>node-v6.10.2-linux-x64.tar.xz<br>Node.js官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>下载地址：<a href="https://nodejs.org/dist/v6.10.2/node-v6.10.2-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v6.10.2/node-v6.10.2-linux-x64.tar.xz</a></p>
</blockquote>
<a id="more"></a>
<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>下载Node.js到自己喜欢的目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v6.10.2&#x2F;node-v6.10.2-linux-x64.tar.xz</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">解压</span><br></pre></td></tr></table></figure>
<p>sudo tar xf node-v6.10.2-linux-x64.tar.xz</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">进入node  bin目录 查看node版本</span><br></pre></td></tr></table></figure>
<p>cd node-v6.10.2-linux-x64/<br>cd bin<br>./node -v</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Node.js全局启动配置</span><br><span class="line">这个时候发现只有在绝对路径下可以使用node，每次都要进入node-v6.10.2-linux-x64&#x2F;bin目录来启动。需要将node配置到全局启动。以下两种方法都可以。*(推荐使用注册环境变量)*</span><br><span class="line"></span><br><span class="line">**进入node&#x2F;bin查看当前绝对目录（以下是我的node目录）**</span><br></pre></td></tr></table></figure>
<p>pwd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;4830242-f5307131ba4844f9.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line"></span><br><span class="line">#### 1.注册环境变量</span><br></pre></td></tr></table></figure>
<p>vi /etc/profile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在export PATH的上一行添加如下内容（绝对路径），然后保存退出。</span><br></pre></td></tr></table></figure>
<p>PATH=$PATH:/www/node-v6.10.2-linux-x64/bin/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;4830242-0a6f0d00ed2b164b.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line"></span><br><span class="line">使变量生效</span><br></pre></td></tr></table></figure>
<p>source /etc/profile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">查看添加结果</span><br></pre></td></tr></table></figure>
<p>echo $PATH </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">测试</span><br></pre></td></tr></table></figure>
<p>node -v         #查看node版本<br>npm -v          #查看npm版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;4830242-e1751f488844b03e.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line"></span><br><span class="line">#### 2.软链接</span><br><span class="line"></span><br><span class="line">添加软连接</span><br></pre></td></tr></table></figure>
<p>ln -s /www/node-v6.10.2-linux-x64/bin/node /usr/local/bin/node       #node.js<br>ln -s /www/node-v6.10.2-linux-x64/bin/npm /usr/local/bin/npm         #npm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试</span><br></pre></td></tr></table></figure>
<p>node -v         #查看node版本<br>npm -v          #查看npm版本</p>
<p>```<br><img src="http://upload-images.jianshu.io/upload_images/4830242-c08b285d771c63a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7下源码安装Redis</title>
    <url>/2017/04/27/20170427_centos7%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Redis/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote>
<p>Redis官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a><br>本文章使用版本：redis-3.2.8.tar.gz<br>下载地址：<a href="http://download.redis.io/releases/redis-3.2.8.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-3.2.8.tar.gz</a></p>
</blockquote>
<a id="more"></a>
<h1 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h1><h5 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.8.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-e23c8fff4d6fc00a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf redis-3.2.8.tar.gz</span><br><span class="line">cd redis-3.2.8&#x2F;</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-c34d7ea3715a3e28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h5 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h5><p>开启相关防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent </span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>
<p>服务配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd utils&#x2F;</span><br><span class="line">.&#x2F;install_server.sh</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-394d7fb936c5334c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>上图1为配置文件地址。</strong></p>
<p><strong>上图2为日志文件地址。</strong></p>
<p><strong>上图3为数据文件地址。</strong></p>
<p><strong>上图4为启动文件地址。</strong></p>
<p><strong><a href="http://www.thuol.com/index/article/getcontent/id/0b7851e3ab98c9b5cfa5b582ef109bee.html" target="_blank" rel="noopener">Redis基础配置（其他机器访问，密码，持久化）传送门：http://www.thuol.com/index/article/getcontent/id/0b7851e3ab98c9b5cfa5b582ef109bee.html</a></strong></p>
<h5 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h5><p>创建redis.service</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;redis.service</span><br></pre></td></tr></table></figure>
<p>写入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Redis</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;etc&#x2F;init.d&#x2F;redis_6379 start</span><br><span class="line">ExecStop&#x3D;&#x2F;etc&#x2F;init.d&#x2F;redis_6379 stop</span><br><span class="line">[Install]</span><br></pre></td></tr></table></figure>
<p>第一次使用/etc/init.d/redis_6379 start启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;redis_6379 start    #启动Redis</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;redis_6379 stop     #关闭Redis</span><br></pre></td></tr></table></figure>
<p>之后使用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start redis.service              #启动redis服务</span><br><span class="line">systemctl enable redis.service             #设置开机自启动</span><br><span class="line">systemctl disable redis.service            #停止开机自启动</span><br><span class="line">systemctl status redis.service             #查看服务当前状态</span><br></pre></td></tr></table></figure>


<h5 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h5><p>进入客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-916a885e9c25f8c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket-php简易聊天（保持网页数据通讯）</title>
    <url>/2017/04/24/20170424_websocket-php%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%EF%BC%88%E4%BF%9D%E6%8C%81%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%E9%80%9A%E8%AE%AF%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>需要安装 swoole扩展<br><img src="http://upload-images.jianshu.io/upload_images/4830242-5ad44d456f1977c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>在linux系统下通过命令行执行php文件。（win下没有swoole扩展）</p>
<a id="more"></a>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h4 id="1-前端websocket"><a href="#1-前端websocket" class="headerlink" title="1. 前端websocket"></a>1. 前端websocket</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">﻿</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Web sockets test&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        var ws;</span><br><span class="line">        function ToggleConnectionClicked() &#123;   </span><br><span class="line">            if( typeof(ws) !&#x3D; &#39;undefined&#39; &amp;&amp; ws.readyState &#x3D;&#x3D; 1 ) &#123;</span><br><span class="line">                alert(&#39;已连接服务器，请勿重复连接！&#39;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;192.168.198.221:9501&quot;);&#x2F;&#x2F;连接服务器,改成你服务器地址</span><br><span class="line">                ws.onopen &#x3D; function(event)&#123;</span><br><span class="line">                    alert(&quot;已经与服务器建立了连接\r\n当前连接状态：&quot;+this.readyState);</span><br><span class="line">                &#125;;</span><br><span class="line">                ws.onmessage &#x3D; function(event)&#123;</span><br><span class="line">                    &#x2F;&#x2F; alert(&quot;接收到服务器发送的数据：\r\n&quot;+event.data);</span><br><span class="line">                    var chat_content &#x3D; document.getElementById(&quot;chat_content&quot;);</span><br><span class="line">                    chat_content.innerHTML &#x3D; chat_content.innerHTML+event.data+&quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">                    &#x2F;&#x2F; console.log(event.data);</span><br><span class="line">                &#125;;</span><br><span class="line">                ws.onclose &#x3D; function(event)&#123;</span><br><span class="line">                    alert(&quot;已经与服务器断开连接\r\n当前连接状态：&quot;+this.readyState);</span><br><span class="line">                &#125;;</span><br><span class="line">                ws.onerror &#x3D; function(event)&#123;</span><br><span class="line">                    alert(&quot;WebSocket异常！&quot;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125; catch (ex) &#123;</span><br><span class="line">                alert(ex.message);      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        function SendData() &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                var content &#x3D; document.getElementById(&quot;content&quot;).value;</span><br><span class="line">                if(content)&#123;</span><br><span class="line">                    ws.send(content);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;catch(ex)&#123;</span><br><span class="line">                alert(ex.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        function seestate()&#123;</span><br><span class="line">            if( typeof(ws) &#x3D;&#x3D; &#39;undefined&#39; ) &#123;</span><br><span class="line">                alert(&#39;还未连接服务器！&#39;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            alert(ws.readyState);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        function ClearChatContent()&#123;</span><br><span class="line">            document.getElementById(&quot;chat_content&quot;).innerHTML &#x3D; &quot;&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id&#x3D;&#39;ToggleConnection&#39; type&#x3D;&quot;button&quot; onclick&#x3D;&#39;ToggleConnectionClicked();&#39;&gt;连接服务器&lt;&#x2F;button&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;textarea id&#x3D;&quot;content&quot; &gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">    &lt;button id&#x3D;&#39;ToggleConnection&#39; type&#x3D;&quot;button&quot; onclick&#x3D;&#39;SendData();&#39;&gt;发送&lt;&#x2F;button&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;button id&#x3D;&#39;ToggleConnection&#39; type&#x3D;&quot;button&quot; onclick&#x3D;&#39;seestate();&#39;&gt;查看状态&lt;&#x2F;button&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&#39;ClearChatContent();&#39;&gt;清屏&lt;&#x2F;button&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;chat_content&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-后台php代码"><a href="#2-后台php代码" class="headerlink" title="2. 后台php代码"></a>2. 后台php代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">﻿&lt;?php</span><br><span class="line"># 创建websocket服务器对象，监听0.0.0.0:9502端口</span><br><span class="line">$ws &#x3D; new swoole_websocket_server(&quot;0.0.0.0&quot;, 9501);</span><br><span class="line"> </span><br><span class="line"># 监听WebSocket连接打开事件</span><br><span class="line">$ws-&gt;on(&#39;open&#39;, function ($ws, $request) &#123;</span><br><span class="line">    &#x2F;&#x2F; var_dump($request-&gt;fd, $request-&gt;get, $request-&gt;server);</span><br><span class="line">    echo $request-&gt;server[&#39;remote_addr&#39;].&quot;已连接\n&quot;;</span><br><span class="line">    $ws-&gt;push($request-&gt;fd, &quot;hello, welcome.your ip is &#123;$request-&gt;server[&#39;remote_addr&#39;]&#125;\n&quot;);</span><br><span class="line"> </span><br><span class="line">    # 广播</span><br><span class="line">    foreach($ws-&gt;connections as $fd) &#123;</span><br><span class="line">        $ws-&gt;push($fd, &quot;用户&#123;$request-&gt;fd&#125;已登录聊天&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"># 监听WebSocket消息事件</span><br><span class="line">$ws-&gt;on(&#39;message&#39;, function (swoole_websocket_server $server, $frame) &#123;</span><br><span class="line">    echo $frame-&gt;fd.&quot; Message: &#123;$frame-&gt;data&#125;\n&quot;;</span><br><span class="line">    # 广播</span><br><span class="line">    foreach($server-&gt;connections as $fd) &#123;</span><br><span class="line">        $server-&gt;push($fd, &quot;用户&#123;$frame-&gt;fd&#125;说: &#123;$frame-&gt;data&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"># 监听WebSocket连接关闭事件</span><br><span class="line">$ws-&gt;on(&#39;close&#39;, function ($ws, $fd) &#123;</span><br><span class="line">    # var_dump($ws, $fd);</span><br><span class="line">    echo &quot;client-&#123;$fd&#125; is closed\n&quot;;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">$ws-&gt;start();</span><br></pre></td></tr></table></figure>

<h4 id="3-通过命令行进行启动php"><a href="#3-通过命令行进行启动php" class="headerlink" title="3. 通过命令行进行启动php"></a>3. 通过命令行进行启动php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;php &#x2F;www&#x2F;wwwroot&#x2F;a&#x2F;testa.php</span><br></pre></td></tr></table></figure>
<h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><p> 分别通过两个不同的浏览器打开前端H5页面（本人使用火狐浏览器和360浏览器），并连接服务器</p>
<p>火狐浏览器<br><img src="http://upload-images.jianshu.io/upload_images/4830242-b4926f092d95bf11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>360浏览器<br><img src="http://upload-images.jianshu.io/upload_images/4830242-40a8b66f58467e60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>发送信息<br><img src="http://upload-images.jianshu.io/upload_images/4830242-2f32fe70a705f593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>后台显示<br><img src="http://upload-images.jianshu.io/upload_images/4830242-7e919731ec7c2efd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>centos7修改系统语言为简体中文</title>
    <url>/2017/04/06/20170406_centos7%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E4%B8%BA%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>自己装系统时一般都可以自定义选择系统语言。可是云端服务器一般都是安装好的镜像，默认系统语言为英文，对于初学者可能还会有搞不懂的计算机词汇。这里简单说一下centos7怎么修改系统语言为中文。</p>
<h1 id="修改centos7系统语言"><a href="#修改centos7系统语言" class="headerlink" title="修改centos7系统语言"></a>修改centos7系统语言</h1><ol>
<li>查看系当前语言包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locale</span><br></pre></td></tr></table></figure>
<a id="more"></a>
查看系统拥有语言包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locale -a</span><br></pre></td></tr></table></figure></li>
</ol>
<p><em>（zh_CN.UTF-8是简体中文，如果没有zh_CN.UTF-8,就安装语言包，如果存在可以直接设置)</em><br>2. 安装简体中文语言包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install kde-l10n-Chinese</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>设置为中文<br>临时修改，重启服务器之后就会还原之前的设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANG&#x3D;&quot;zh_CN.UTF-8&quot;    #修改为中文</span><br><span class="line">LANG&#x3D;&quot;en_US.UTF-8&quot;    #修改为英文</span><br></pre></td></tr></table></figure>
永久修改就要把配置写入文件里面<br>方法（一）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;locale.conf</span><br><span class="line">##加下面内容到第一行，设置中文</span><br><span class="line">LANG&#x3D;zh_CN.UTF8</span><br></pre></td></tr></table></figure>
方法（二）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localectl  set-locale LANG&#x3D;zh_CN.UTF8</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>修改时区为亚洲上海</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>

<p>查看ip时bash: ifconfig: command not found 解决办法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install net-tools      ##一般是没有安装这个</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器基础安全配置（centos7）</title>
    <url>/2017/04/06/20170406_linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%EF%BC%88centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>没有绝对的安全，只有相对的安全</p>
<h1 id="1-修改root密码"><a href="#1-修改root密码" class="headerlink" title="1. 修改root密码"></a>1. 修改root密码</h1><p>root作为超级管理员可以做很多事情（甚至删除系统），密码简单了容易被暴力破解，建议使用<strong>密码生成器</strong>生成一个16位复杂的密码（暴力破解也需要更长的时间），不要想着记住密码了，使用的时候就复制-粘贴吧，毕竟作为服务器当上线运行的时候不会经常有用到root权限。</p>
<h4 id="计算一下暴力破解16位密码的时间（此段可跳过直接往下看）"><a href="#计算一下暴力破解16位密码的时间（此段可跳过直接往下看）" class="headerlink" title="计算一下暴力破解16位密码的时间（此段可跳过直接往下看）"></a>计算一下暴力破解16位密码的时间（此段可跳过直接往下看）</h4><p>单个密码的可能（95）=（26）小写字母+（26）大写字母+（10）数字+（32）键盘上的符号+（1）空格<br>16位密码共有多少种组合呢？</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-c7ee18137ffa1fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>如果普通计算机的破解速度为每秒10000000个（一千万个还不包括软件运算和网络卡顿延迟时间。。。）<br>一天=60×60×24=86400秒<br>假设黑客运气好点，暴力尝试一半就破解了，我们计算一下需要多少天<br><img src="http://upload-images.jianshu.io/upload_images/4830242-e0446b5753711667.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>后面还有两个个0呢。。。。<br><img src="http://upload-images.jianshu.io/upload_images/4830242-75943a8ba20ff57c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>需要25470293324750000000天。。。自己计算一下需要多少年吧。一般别人不会跟你有生死仇吧，你的服务器也不会重要到国家战争级别吧。。不会有人从出生到入土都在破解你一台服务器。<br>计算了这么多，就是说明<strong>密码越长越好</strong>，多一位数就是指数级上升，自己记不住没关系，可以复制粘贴嘛。<br>密码长了就安全吗？当然不是，人家可以拦截你在网络上传输的数据包，你输入了什么都有可能看到，你复制-粘贴，人家也复制-粘贴。。。<strong>密码长度越长可防止暴力破解</strong></p>
<h1 id="2-添加其他用户，将用户分组。"><a href="#2-添加其他用户，将用户分组。" class="headerlink" title="2. 添加其他用户，将用户分组。"></a>2. 添加其他用户，将用户分组。</h1><p>各司其职，权限不是越大越好，用户需要什么权限就分配什么权限，可将不同功能的用户分为不同的组。<br>比如：ftp用户分配在ftp组内，git分配到git组中。。。<br>具体方法如下<br><a href="http://www.jianshu.com/p/f468e02f38a0" target="_blank" rel="noopener">linux添加用户，用户组（centos7）传送门：</a><a href="http://www.jianshu.com/p/f468e02f38a0" target="_blank" rel="noopener">http://www.jianshu.com/p/f468e02f38a0</a></p>
<h1 id="3-更换ssh登录端口"><a href="#3-更换ssh登录端口" class="headerlink" title="3. 更换ssh登录端口"></a>3. 更换ssh登录端口</h1><p>ssh默认端口为22。<strong>默认的东西你知我知</strong>。</p>
<ul>
<li>修改sshd_config文件（关于ssh的配置大多都在这个文件中）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>
搜索Port修改为2222端口（端口可自行更改）<br>理论上可以改成随意端口，可是这些端口可能会和其他服务冲突，<a href="https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers" target="_blank" rel="noopener">可以参考这里</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Port  2222</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-8cd49d8b74cd8086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;2222&#x2F;tcp --permanent      #开启防火墙2222端口</span><br><span class="line">systemctl restart firewalld.service                             #重启防火墙</span><br><span class="line">systemctl restart sshd.service                                  #重启ssh服务</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="4-使用密钥-密码登录（双层保障）"><a href="#4-使用密钥-密码登录（双层保障）" class="headerlink" title="4. 使用密钥+密码登录（双层保障）"></a>4. 使用密钥+密码登录（双层保障）</h1><p>当别人通过非暴力破解方式获取了你的服务器登录密码之后，密码再长也没有用了。这个时候就需要使用密钥文件验证了。如果加上密码安全系数相对会更高一点。<br>密钥是提前生成的。想要登录，必须拿到密钥文件。拿到密钥文件后才有资格输入密码。密钥文件也可以单独加密，这样要登录服务器就要获取到密钥文件，输入两个密码。<br>同时获取到这个三个条件（<strong>密钥文件，密钥密码，用户密码</strong>）难度可不是×3了。。。再被别人莫名其妙的登录那就要想想自己得罪谁了，被人家针对了。。<br><a href="http://www.jianshu.com/p/b1eeb3f1a2c1" target="_blank" rel="noopener"> 使用密钥+密码登录传送门：</a><a href="http://www.jianshu.com/p/b1eeb3f1a2c1" target="_blank" rel="noopener">http://www.jianshu.com/p/b1eeb3f1a2c1</a></p>
<h1 id="5-防火墙端口配置"><a href="#5-防火墙端口配置" class="headerlink" title="5. 防火墙端口配置"></a>5. 防火墙端口配置</h1><p>用到什么端口就开什么端口，千万不要为了省事，直接关闭防火墙。<br>防火墙端口设置常用命令，添加/禁用，操作后需要重启或重载防火墙生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld                                     #启动防火墙</span><br><span class="line">systemctl stop firewalld                                      #禁用防火墙(防火墙全部关闭)</span><br><span class="line">systemctl restart firewalld.service                           #重启防火墙</span><br><span class="line">firewall-cmd --reload                                         #重启载入防火配置</span><br><span class="line">systemctl enable firewalld.service                            #将防火墙加入开机自启动</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent      #添加开启80端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;4000-4010&#x2F;tcp --permanent      #添加开启4000-4010端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --remove-port&#x3D;21&#x2F;tcp --permanent   #禁用21端口</span><br><span class="line"></span><br><span class="line">firewall-cmd    --query-port&#x3D;80&#x2F;tcp                           #查询80端口是否开启</span><br><span class="line">netstat -tunlp |grep ftp                                      #查看ftp端口使用端口情况</span><br><span class="line">netstat -ntlp                                                 #查看监听(Listen)的端口</span><br><span class="line">netstat -antp                                                 #查看所有建立的TCP连接</span><br><span class="line">iptables -L                                                   #查看防火墙规则</span><br></pre></td></tr></table></figure>

<h1 id="6-设置日志文件系统"><a href="#6-设置日志文件系统" class="headerlink" title="6. 设置日志文件系统"></a>6. 设置日志文件系统</h1><p>使用history命令查看当前系统用户操作日志是默认10000行这样的用户是不够的。<br>而且同一个用户多个地方同时登录我们就查不到具体那条命令是哪个用户在哪个ip登录并执行的。<br>所以我们需要自己创建ssh日志记录。</p>
<ul>
<li>编辑profile文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
使用户登录后在<code>/tmp/dbasky</code>目录生成日志（目录可自定义修改，修改下面代码对应目录即可）<br>将以下内容粘贴到文件底部<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#########################日志记录##############################</span><br><span class="line">PS1&#x3D;&quot;&#96;whoami&#96;@&#96;hostname&#96;:&quot;&#39;[$PWD]&#39;</span><br><span class="line">history</span><br><span class="line">USER_IP&#x3D;&#96;who -u am i 2&gt;&#x2F;dev&#x2F;null| awk &#39;&#123;print $NF&#125;&#39;|sed -e &#39;s&#x2F;[()]&#x2F;&#x2F;g&#39;&#96;</span><br><span class="line">if [ &quot;$USER_IP&quot; &#x3D; &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">USER_IP&#x3D;&#96;hostname&#96;</span><br><span class="line">fi</span><br><span class="line">if [ ! -d &#x2F;tmp&#x2F;dbasky ]</span><br><span class="line">then</span><br><span class="line">mkdir &#x2F;tmp&#x2F;dbasky</span><br><span class="line">chmod 777 &#x2F;tmp&#x2F;dbasky</span><br><span class="line">fi</span><br><span class="line">if [ ! -d &#x2F;tmp&#x2F;dbasky&#x2F;$&#123;LOGNAME&#125; ]</span><br><span class="line">then</span><br><span class="line">mkdir &#x2F;tmp&#x2F;dbasky&#x2F;$&#123;LOGNAME&#125;</span><br><span class="line">chmod 300 &#x2F;tmp&#x2F;dbasky&#x2F;$&#123;LOGNAME&#125;</span><br><span class="line">fi</span><br><span class="line">export HISTSIZE&#x3D;4096</span><br><span class="line">DT&#x3D;&#96;date &quot;+%Y-%m-%d_%H:%M:%S&quot;&#96;</span><br><span class="line">export HISTFILE&#x3D;&quot;&#x2F;tmp&#x2F;dbasky&#x2F;$&#123;LOGNAME&#125;&#x2F;$&#123;USER_IP&#125; dbasky.$DT&quot;</span><br><span class="line">chmod 600 &#x2F;tmp&#x2F;dbasky&#x2F;$&#123;LOGNAME&#125;&#x2F;*dbasky* 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
使用脚本生效<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
退出用户，重新登录<br>查看日志（默认只有root有权限查看），不同用户会以用户名名单独创建目录，使用vi即可查看<br><img src="http://upload-images.jianshu.io/upload_images/4830242-911c84ec11759abc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<h1 id="7-最后禁止-root-用户使用-ssh-登入"><a href="#7-最后禁止-root-用户使用-ssh-登入" class="headerlink" title="7.  最后禁止 root 用户使用 ssh 登入"></a>7.  最后禁止 root 用户使用 ssh 登入</h1><p>当服务器基础环境搭建好之后就可以禁用掉root账号登录，平时只使用普通账号。<br>如果需要管理员权限可以在命令前加sudo。或者登录后切换到root用户（切换root也尽量少用）。</p>
<h4 id="禁用root配置"><a href="#禁用root配置" class="headerlink" title="禁用root配置"></a>禁用root配置</h4><ul>
<li>修改sshd_config文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>
搜索PermitRootLogin修改为no，yes为允许root账号登录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PermitRootLogin no</span><br></pre></td></tr></table></figure>
重启ssh服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure></li>
</ul>
<p>*<em>这个时候不要关闭当前的连接，另外开一个连接进行测试root是否能登录。同时保证有其他用户可以登录，如果其他用户不能登录还能改回来。否则你关闭了连接又没有其他账号可登录。想要控制远程的服务器，呵呵！！→_→ *</em><br>（真的关闭了当然不是不能连接，麻烦点。如果自建机房，带着键盘和显示器去机房吧。如果是云服务器，一般登录管理页面都有控制台。）</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux使用密钥+密码登录ssh（centos7）</title>
    <url>/2017/04/06/20170406_linux%E4%BD%BF%E7%94%A8%E5%AF%86%E9%92%A5+%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95ssh%EF%BC%88centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="密钥-密码登录ssh（双层保障）"><a href="#密钥-密码登录ssh（双层保障）" class="headerlink" title="密钥+密码登录ssh（双层保障）"></a>密钥+密码登录ssh（双层保障）</h1><h4 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1. 生成密钥"></a>1. 生成密钥</h4><p>使用需要生成密钥的用户登录后键入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>直接回车会在<code>~/.ssh</code>目录（用户所在家目录下的.ssh目录，如果没有请自行创建<code>.ssh</code>目录）生成id_rsa, id_rsa.pub文件 第一个是私有密钥 第二个是公共密钥。如果输入内容会在当前目录创建你输入内容为名称的私钥公钥。这里直接回车。<br>然后输入密钥密码，再次输入密码（也可以不要密码直接回车）。生成密钥完成。<br><img src="http://upload-images.jianshu.io/upload_images/4830242-f5a1a7e7b5167fcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>将用户<code>.ssh</code>目录内的两个密钥下载到本地。（我用的是win客户端ftp方式下载）</p>
<h4 id="2-配置ssh使用密钥（一定先下载下来再去修改配置）"><a href="#2-配置ssh使用密钥（一定先下载下来再去修改配置）" class="headerlink" title="2. 配置ssh使用密钥（一定先下载下来再去修改配置）"></a>2. 配置ssh使用密钥（一定先下载下来再去修改配置）</h4><p>将.ssh中的id_rsa.pub复制并改名字为authorized_keys</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line">cp id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure>
<p>修改authorized_keys权限为700（必须修改为700，不能为其他）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 700 authorized_keys</span><br></pre></td></tr></table></figure>
<p>修改sshd_config文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>
<p>参考如下修改，如果前面有# 去除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StrictModes no  </span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile      .ssh&#x2F;authorized_keys      #ssh文件位置</span><br><span class="line">PasswordAuthentication yes                        #使用密码  no为不使用密码</span><br><span class="line">AuthenticationMethods publickey,password          #如果密码和密钥都使用在末尾加上此行代码</span><br></pre></td></tr></table></figure>
<p>重启ssh服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>
<h4 id="3-win下使用putty密钥-密码登录ssh"><a href="#3-win下使用putty密钥-密码登录ssh" class="headerlink" title="3. win下使用putty密钥+密码登录ssh"></a>3. win下使用putty密钥+密码登录ssh</h4><p>打开puttygen.exe生成ppk文件<br><img src="http://upload-images.jianshu.io/upload_images/4830242-20800574e8e70d5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>载入刚才下载的私钥（一定先下载下来再去修改配置）<br><img src="http://upload-images.jianshu.io/upload_images/4830242-ea3c85d4054f408c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-bc9355eb1a6d27e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>输入生成密钥时输入的密码<br><img src="http://upload-images.jianshu.io/upload_images/4830242-4f3b686af15b2ebd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>保存私钥，选择SSH-2 RSA<br><img src="http://upload-images.jianshu.io/upload_images/4830242-bfc2899cf1fcb5be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>打开putty<br><img src="http://upload-images.jianshu.io/upload_images/4830242-7acfdc0fe8efff6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>选择刚才保存的私钥，然后打开<br><img src="http://upload-images.jianshu.io/upload_images/4830242-d8c1032bbc0208ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>输入该密钥的用户名，密码进行登录<br><img src="http://upload-images.jianshu.io/upload_images/4830242-e66b6d8d2797cd2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux添加用户，用户组（centos7）</title>
    <url>/2017/04/05/20170405_linux%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%8C%E7%94%A8%E6%88%B7%E7%BB%84%EF%BC%88centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="linux下添加，删除，修改，查看用户和用户组"><a href="#linux下添加，删除，修改，查看用户和用户组" class="headerlink" title="linux下添加，删除，修改，查看用户和用户组"></a>linux下添加，删除，修改，查看用户和用户组</h1><h4 id="1-增加一个test组"><a href="#1-增加一个test组" class="headerlink" title="1 .增加一个test组"></a>1 .增加一个test组</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd test</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2-将test组的名子改成test2"><a href="#2-将test组的名子改成test2" class="headerlink" title="2. 将test组的名子改成test2"></a>2. 将test组的名子改成test2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupmod -n test2 test</span><br></pre></td></tr></table></figure>
<h4 id="3-删除组test2"><a href="#3-删除组test2" class="headerlink" title="3. 删除组test2"></a>3. 删除组test2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupdel test2</span><br></pre></td></tr></table></figure>
<h4 id="4-查看组"><a href="#4-查看组" class="headerlink" title="4. 查看组"></a>4. 查看组</h4><ol>
<li>查看当前登录用户所在的组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groups</span><br></pre></td></tr></table></figure></li>
<li>查看用户test所在组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groups test</span><br></pre></td></tr></table></figure></li>
<li>查看所有组<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h1><h4 id="1-添加用户和修改用户帮助文档"><a href="#1-添加用户和修改用户帮助文档" class="headerlink" title="1. 添加用户和修改用户帮助文档"></a>1. 添加用户和修改用户帮助文档</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -help     #添加帮助文档</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-53a304c361f68160.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -h      #修改帮助文档</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-12d60abd2b9259e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="2-添加用户（参考帮助文档进行用户配置）"><a href="#2-添加用户（参考帮助文档进行用户配置）" class="headerlink" title="2. 添加用户（参考帮助文档进行用户配置）"></a>2. 添加用户（参考帮助文档进行用户配置）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -g test2 -m  utest                       #添加utest到test2组并创建用户目录（要先创建test2组）</span><br><span class="line">useradd -g test2 -M -s &#x2F;sbin&#x2F;nologin  qtest      #添加qtest到test2组不创建用户目录，并且不可用于登录</span><br></pre></td></tr></table></figure>
<h4 id="3-修改utest用户密码"><a href="#3-修改utest用户密码" class="headerlink" title="3. 修改utest用户密码"></a>3. 修改utest用户密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd utest</span><br></pre></td></tr></table></figure>
<h4 id="4-修改用户（参考帮助文档进行用户配置）"><a href="#4-修改用户（参考帮助文档进行用户配置）" class="headerlink" title="4. 修改用户（参考帮助文档进行用户配置）"></a>4. 修改用户（参考帮助文档进行用户配置）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id utest                                 #查看utest用户的UID和GID</span><br><span class="line">usermod -d &#x2F;home&#x2F;test -G test2 utest     #将utest用户的登录目录改成&#x2F;home&#x2F;test，并加入test2组，注意这里是大G。</span><br><span class="line">usermod -s &#x2F;bin&#x2F;bash qtest               #修改qtest用户可登录</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpasswd -a utest test3    #将用户utest加入到test3组(用户可以属于多个组)</span><br><span class="line">gpasswd -d utest test3     #将用户utest从test3组中移出</span><br></pre></td></tr></table></figure>
<h4 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5.删除用户"></a>5.删除用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">userdel qtest         #删除用户qtest</span><br><span class="line">userdel -r utest      #删除用户utest，同时删除他的工作目录</span><br></pre></td></tr></table></figure>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h4 id="1-查看所有用户"><a href="#1-查看所有用户" class="headerlink" title="1. 查看所有用户"></a>1. 查看所有用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd             #查看所有用户的列表</span><br><span class="line">w                           #查看当前活跃的用户列表</span><br><span class="line">pkill -kill -t pts&#x2F;1        #踢掉活跃用户（最后一个参数为需要踢掉用户的tty参数）</span><br></pre></td></tr></table></figure>
<h4 id="2-查看登录日志"><a href="#2-查看登录日志" class="headerlink" title="2. 查看登录日志"></a>2. 查看登录日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more &#x2F;var&#x2F;log&#x2F;secure</span><br><span class="line">who &#x2F;var&#x2F;log&#x2F;wtmp</span><br></pre></td></tr></table></figure>
<h4 id="3-查看用户操作记录-使用root账号"><a href="#3-查看用户操作记录-使用root账号" class="headerlink" title="3. 查看用户操作记录(使用root账号)"></a>3. 查看用户操作记录(使用root账号)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su utest    #切换到要查看的目录</span><br><span class="line">history     #能看到这个用户历史命令，默认最近的1000条</span><br></pre></td></tr></table></figure>
<h4 id="4-创建管理员权限的账号"><a href="#4-创建管理员权限的账号" class="headerlink" title="4. 创建管理员权限的账号"></a>4. 创建管理员权限的账号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -o -u 0 -g 0 -M -d &#x2F;root -s &#x2F;bin&#x2F;bash admin    #拥有root 一样的权限</span><br><span class="line">passwd admin</span><br></pre></td></tr></table></figure>
<h4 id="5-普通账号使用sudo"><a href="#5-普通账号使用sudo" class="headerlink" title="5. 普通账号使用sudo"></a>5. 普通账号使用sudo</h4><p>修改sudo文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su -                            #切换到超级管理员（带 - 相当直接使用root登录）</span><br><span class="line">visudo</span><br></pre></td></tr></table></figure>
<p> 添加要使用sudo权限的帐号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utest   ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-b4adc2f94a74d3ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP搭建与配置（centos7）</title>
    <url>/2017/04/05/20170405_FTP%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%88centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>参考网络上其他人文章。将他人技术文章亲自测试并总结补充。</p>
<blockquote>
<p><strong>本文需要开启服务器21端口</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;21&#x2F;tcp --permanent      #添加开启端口，要开启21；</span><br><span class="line">systemctl restart firewalld.service                           #重启防火墙</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="FTP搭建与配置"><a href="#FTP搭建与配置" class="headerlink" title="FTP搭建与配置"></a>FTP搭建与配置</h1><h4 id="1-安装vsftpd"><a href="#1-安装vsftpd" class="headerlink" title="1. 安装vsftpd"></a>1. 安装vsftpd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>
<h4 id="2-修改vsftpd的配置文件"><a href="#2-修改vsftpd的配置文件" class="headerlink" title="2. 修改vsftpd的配置文件"></a>2. 修改vsftpd的配置文件</h4><p>本文使用/www目录为ftp根目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;www            #创建&#x2F;www目录</span><br><span class="line">chmod -R 777 &#x2F;www     #更改&#x2F;www目录权限</span><br></pre></td></tr></table></figure>
<p>修改vsftpd文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br></pre></td></tr></table></figure>
<p>参考如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">anonymous_enable&#x3D;NO     #不允许匿名访问</span><br><span class="line">local_enable&#x3D;YES        #允许使用本地帐户进行FTP用户登录验证</span><br><span class="line">listen&#x3D;YES              #ip监听</span><br><span class="line">#listen_ipv6&#x3D;YES        #前面加上#号禁用ipv6</span><br><span class="line"></span><br><span class="line">#不在&#x2F;etc&#x2F;vsftpd.chroot_list文件中列出的用户不能切换根以外目录</span><br><span class="line">#如果&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list不存在，自己创建（里面可以是空）。</span><br><span class="line">chroot_local_user&#x3D;YES</span><br><span class="line">chroot_list_enable&#x3D;YES</span><br><span class="line">chroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list</span><br><span class="line"></span><br><span class="line">allow_writeable_chroot&#x3D;YES  #允许写入目录</span><br><span class="line"></span><br><span class="line">#设定支持ASCII模式的上传和下载功能。</span><br><span class="line">ascii_upload_enable&#x3D;YES</span><br><span class="line">ascii_download_enable&#x3D;YES</span><br><span class="line"></span><br><span class="line">local_root&#x3D;&#x2F;www         #ftp访问目录</span><br><span class="line"></span><br><span class="line">pasv_enable&#x3D;YES   &#x2F;&#x2F;开启PASV模式</span><br><span class="line">pasv_min_port&#x3D;40000   &#x2F;&#x2F;最小端口号</span><br><span class="line">pasv_max_port&#x3D;40080   &#x2F;&#x2F;最大端口号</span><br><span class="line">pasv_promiscuous&#x3D;YES</span><br></pre></td></tr></table></figure>
<p>ftp连接方式分为主动和被动，增加PASV模式端口区间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;40000-40080&#x2F;tcp --permanent      #添加开启端口，要开启40000-40080；</span><br><span class="line">systemctl restart firewalld.service                                    #重启防火墙</span><br></pre></td></tr></table></figure>
<p>启动（使用命令）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd.service         #启动ftp服务</span><br><span class="line">systemctl stop vsftpd.service          #停止ftp服务</span><br><span class="line">systemctl restart vsftpd.service       #重启ftp服务</span><br><span class="line">systemctl enable vsftpd.service        #将ftp服务加入开机自启动</span><br></pre></td></tr></table></figure>
<h4 id="3-新建用户"><a href="#3-新建用户" class="headerlink" title="3. 新建用户"></a>3. 新建用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -d &#x2F;www -g ftp -s &#x2F;sbin&#x2F;nologin ftpuser     #新建用户名为ftpuser，不可登录</span><br><span class="line">passwd ftpuser                                      #修改密码</span><br></pre></td></tr></table></figure>
<h4 id="4-客户端访问"><a href="#4-客户端访问" class="headerlink" title="4. 客户端访问"></a>4. 客户端访问</h4><p><img src="http://upload-images.jianshu.io/upload_images/4830242-4f8612b7465b9c12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-090be5be58833993.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="扩展虚拟用户访问"><a href="#扩展虚拟用户访问" class="headerlink" title="扩展虚拟用户访问"></a>扩展虚拟用户访问</h1><p>有时候需求为多个用户访问不同的目录，这个时候就需要使用虚拟用户（下次再写。。。）</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>邮件服务器（postfix+devocot+cyrus-sasl+centos7）</title>
    <url>/2017/03/29/20170329_%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88postfix+devocot+cyrus-sasl+centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>参考网络上其他人文章。将他人技术文章亲自测试并总结补充。<br>搭建邮件服务器需要有一台公网服务器和域名<br>本文使用10.10.10.10代替实际公网ip，使用a.com代替实际域名</p>
<a id="more"></a>
<h1 id="邮件器搭建"><a href="#邮件器搭建" class="headerlink" title="邮件器搭建"></a>邮件器搭建</h1><p><strong>1 . 邮件服务器域名解析（主要参数）</strong></p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th align="center">主机记录</th>
<th align="right">记录值</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td align="center">@</td>
<td align="right">10.10.10.10</td>
</tr>
<tr>
<td>A</td>
<td align="center">mail</td>
<td align="right">10.10.10.10</td>
</tr>
<tr>
<td>MX</td>
<td align="center">@</td>
<td align="right">mail.a.com</td>
</tr>
<tr>
<td>TXT</td>
<td align="center">@</td>
<td align="right">v=spf1 inuyi.cspf.mail.a.com ~all</td>
</tr>
<tr>
<td><img src="http://upload-images.jianshu.io/upload_images/4830242-03585547be8bcd8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><strong>2 .安装相关软件</strong></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>卸载 sendmail 服务<em>(看到网上有文章说这个不好用，那就卸载了吧)</em></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;sendmail stop     #&#x2F;&#x2F;停止 sendmail 服务</span><br><span class="line">yum remove sendmail           #&#x2F;&#x2F;卸载 sendmail 服务</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>安装 postfix 和 dovecot</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install postfix dovecot</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>安装 cycus-sasl</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install cyrus-sasl-*</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><strong>3 .配置相关软件</strong></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>配置 postfix</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;postfix&#x2F;main.cf</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<p>按照以下进行配置，将前面的#号去掉并修改参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myhostname&#x3D;mail.a.com             #这里要换成你自己的邮箱服务器</span><br><span class="line">mydomain&#x3D;a.com                    #这里换成你自己的主机服务器</span><br><span class="line">myorigin &#x3D; $mydomain</span><br><span class="line">inet_interfaces &#x3D; all             ＃可以接收所有域名的邮件</span><br><span class="line">inet_protocols &#x3D; ipv4             #全部小写，否则报错</span><br><span class="line">mydestination &#x3D; $myhostname, localhost.$mydomain, localhost, $mydomain,mail.$mydomain, www.$mydomain, ftp.$mydomain</span><br><span class="line">local_recipient_maps &#x3D;</span><br><span class="line">mynetworks &#x3D;0.0.0.0&#x2F;0             ＃设置内网ip</span><br><span class="line">relay_domains &#x3D; $mydestination</span><br><span class="line">home_mailbox &#x3D; Maildir&#x2F;</span><br><span class="line">#以下内容直接粘贴到底部</span><br><span class="line">smtpd_sasl_auth_enable &#x3D; yes</span><br><span class="line">smtpd_sasl_security_options &#x3D; noanonymous</span><br><span class="line">broken_sasl_auth_clients &#x3D; yes</span><br><span class="line">smtpd_recipient_restrictions &#x3D; permit_sasl_authenticated,reject_unauth_destination,permit_mynetworks</span><br><span class="line">smtpd_client_restrictions &#x3D; permit_sasl_authenticated</span><br></pre></td></tr></table></figure>
<p>配置 dovecot</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;dovecot&#x2F;dovecot.conf</span><br><span class="line">####修改如下内</span><br><span class="line">protocols &#x3D; imap pop3 lmtp</span><br><span class="line">listen &#x3D; *</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;10-auth.conf</span><br><span class="line">####修改如下内</span><br><span class="line">disable_plaintext_auth &#x3D; no</span><br><span class="line">auth_mechanisms &#x3D; plain</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;10-mail.conf</span><br><span class="line">####修改如下内</span><br><span class="line">mail_location &#x3D; maildir:~&#x2F;Maildir</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;10-ssl.conf</span><br><span class="line">####修改如下内</span><br><span class="line">ssl &#x3D; no</span><br></pre></td></tr></table></figure>
<p>配置 sasl2 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;saslauthd</span><br><span class="line">####修改如下内</span><br><span class="line">MECH&#x3D;shadow  #指定以本地系统用户名认证</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;lib64&#x2F;sas12&#x2F;smtpd.conf    &#x2F;&#x2F;64位系统</span><br><span class="line">####修改如下内，如果没有文件，自行创建该目录和文件</span><br><span class="line">pwcheck_method: saslauthd</span><br><span class="line">mech_list: PLAIN LOGIN</span><br><span class="line">log_level:3</span><br></pre></td></tr></table></figure>
<p><strong>4 .启动服务</strong><br>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl  start  dovecot</span><br><span class="line">systemctl  start  postfix</span><br><span class="line">systemctl  start  saslauthd</span><br></pre></td></tr></table></figure>
<p>停止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl  stop dovecot</span><br><span class="line">systemctl  stop postfix</span><br><span class="line">systemctl  stop saslauthd</span><br></pre></td></tr></table></figure>
<p>查看状态,出现如下启动成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status postfix</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-ea9c9c69905542b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>5 .客户端配置，收发邮件测试</strong><br>因为使用系统用户为账号要创建一个新账号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd adminmail</span><br></pre></td></tr></table></figure>
<p>修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd adminmail      #输入两次密码账号创建完成</span><br></pre></td></tr></table></figure>
<p>配置客户端（本文使用Foxmail）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-e61fee5363842e50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>红色框内输入自己的配置信息（因为没有配置证书，不用勾选ssl）<br><img src="http://upload-images.jianshu.io/upload_images/4830242-6babaf4c513b890e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-09ca067105a6bcd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>发送测试<br><img src="http://upload-images.jianshu.io/upload_images/4830242-c10169e67f23fe7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-6c9c98fc47eb3ae4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>我的126邮箱客户端在手机上，已经收到邮件。<br><img src="http://upload-images.jianshu.io/upload_images/4830242-b4ff351f265748c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>回复一下邮件，测试服务器能收到邮件<br><img src="http://upload-images.jianshu.io/upload_images/4830242-6a09a664e7ae4345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-c3a5b1befae143d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-ad648832e3ec34fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4830242-d27c2bafc0339614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="说两句"><a href="#说两句" class="headerlink" title="说两句"></a>说两句</h1><p><strong>经过测试给126邮箱发送邮件可以成功，给QQ邮箱发送出现点问题。</strong>返回我如下信息，可能是配置问题？腾讯给拦截了？，有兴趣的同学自己找找解决方案（本文不深入查找了）。<br><img src="http://upload-images.jianshu.io/upload_images/4830242-bc8d73b98fd7f1b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>frp实现内网穿透（centos7）</title>
    <url>/2017/03/28/20170328_frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>参考网络上其他人文章。将他人技术文章亲自测试并总结补充。<br>实现内网穿需要有一台公网服务器，域名。<em>（本文将公网服务器称为服务端，内网服务器称为客户端）</em><br>（需要开启相关的端口。相关端口没开通，访问就会失败。）</p>
<a id="more"></a>
<blockquote>
<p>frp下载地址:<a href="http://getfrp.yzxx-soft.com/" target="_blank" rel="noopener">http://getfrp.yzxx-soft.com/</a><br><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a><br>本文使用软件：frp_0.8.1_linux_amd64.tar.gz<br>本文使用系统：centos7（公网一台，内网一台），其他系统配置类似<br>本文使用a.com代替实际域名，10.10.10.10代替实际公网ip，实际中请使用自己的域名和ip并解析到服务端<br>主域名：a.com<br>公网服务器ip：10.10.10.10<br>内网服务器ip：192.168.198.229</p>
</blockquote>
<h1 id="centos7-frp安装和配置（其他系统配置类似）"><a href="#centos7-frp安装和配置（其他系统配置类似）" class="headerlink" title="centos7 frp安装和配置（其他系统配置类似）"></a>centos7 frp安装和配置（其他系统配置类似）</h1><ol>
<li><p>将软件下载到服务器和客户端<em>（服务端和客户端相同）</em><br>解压frp软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf frp_0.8.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入解压后的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd frp_0.8.1_linux_amd64</span><br></pre></td></tr></table></figure>
<p>文件说明</p>
<blockquote>
<p><code>frps.ini</code>: 服务端配置文件<br><code>frps</code>: 服务端软件<br><code>frpc.ini</code>: 客户端配置文件<br><code>frpc</code>: 客户端软件</p>
</blockquote>
</li>
<li><p>修改<strong>服务端</strong>配置<br>修改服务端frps.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi frps.ini</span><br></pre></td></tr></table></figure>
<p>修改如下内容（由于本文为测试，所以将原配置文件清空），或对照如下修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line">vhost_http_port &#x3D; 80</span><br><span class="line">[ssh]</span><br><span class="line">listen_port &#x3D; 6000</span><br><span class="line">auth_token &#x3D; 123</span><br><span class="line">[web]</span><br><span class="line">type &#x3D; http</span><br><span class="line">custom_domains &#x3D; test1.a.com</span><br><span class="line">auth_token &#x3D; 123</span><br><span class="line">[web2]</span><br><span class="line">type &#x3D; http</span><br><span class="line">custom_domains &#x3D; test2.a.com</span><br><span class="line">auth_token &#x3D; 123</span><br></pre></td></tr></table></figure>
<p>开启服务端服务(在frp_0.8.1_linux_amd64目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;frps -c .&#x2F;frps.ini</span><br></pre></td></tr></table></figure>
<p>服务端出现如下启动成功<br><img src="http://upload-images.jianshu.io/upload_images/4830242-9b11c67e4f72a3fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>配置说明</p>
<blockquote>
<p><code>[common]</code>     必须设置<br><code>bind_port</code>  是自己设定的frp服务端端口<br><code>vhost_http_port</code>  是自己设定的http访问端口<br><code>[ssh]</code>    ssh反向代理(不是必须设置)<br><code>listen_port</code> 是自己设定的ssh访问端口<br><code>auth_token</code>用于身份认证（以下皆是）。<br><code>[web]</code> http反向代理[]里的内容可以自己设定，但是客户端和服务端必须要对应(如[aaa],[bbb])；<br><code>type</code> 为服务类型，可以设为http,https<br><code>custom_domains</code>为要映射的域名，记得域名的A记录要解析到外网主机的IP。<br><code>[web2]</code>同上(可设置多个)</p>
</blockquote>
</li>
<li><p>修改<strong>客户端</strong>配置（win系统找到相应配置文件进行类似配置）<br>修改服务端frpc.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi frpc.ini</span><br></pre></td></tr></table></figure>
<p>修改如下内容（由于本文为测试，所以将原配置文件清空），或对照如下修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 10.10.10.10</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line">auth_token &#x3D; 123</span><br><span class="line">[ssh]</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">[web]</span><br><span class="line">type &#x3D; http</span><br><span class="line">local_port &#x3D; 80</span><br><span class="line">[web2]</span><br><span class="line">type &#x3D; http</span><br><span class="line">local_port &#x3D; 8080</span><br></pre></td></tr></table></figure>
<p>开启客户端服务(在frp_0.8.1_linux_amd64目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;frpc -c .&#x2F;frpc.ini</span><br></pre></td></tr></table></figure>
<p>客户端出现如下启动成功<br><img src="http://upload-images.jianshu.io/upload_images/4830242-df4aa43d141e8448.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>配置说明</p>
<blockquote>
<p><code>[common]</code>必填<br><code>server_addr</code>frp服务端的ip（也就是外网主机的IP）<br><code>server_port</code>frp服务端的bind_prot。<br><code>[ssh]</code><br><code>local_port</code>客户端ssh端口。<br><code>[web]</code><br><code>type</code>对应服务端配置<br><code>local_port</code>客户端访问端口。<br><code>[web2]</code>同上</p>
</blockquote>
</li>
</ol>
<h1 id="测试-本文中客户端已经装了Nginx服务"><a href="#测试-本文中客户端已经装了Nginx服务" class="headerlink" title="测试(本文中客户端已经装了Nginx服务)"></a>测试(本文中客户端已经装了Nginx服务)</h1><ol>
<li>http测试<br>访问内网<a href="http://192.168.198.229" target="_blank" rel="noopener">http://192.168.198.229</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-24034fd9fb7d9938.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>访问域名<a href="http://test1.a.com" target="_blank" rel="noopener">http://test1.a.com</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-234e7d52eeb4afb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>ssh连接内网机器测试（linux系统）<br>连接设置<br><img src="http://upload-images.jianshu.io/upload_images/4830242-120efccee726de62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>连接结果<br><img src="http://upload-images.jianshu.io/upload_images/4830242-879f0bc8ce3d6b07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>win系统也可通过tcp远程桌面连接，只需要把客户端端口改成win远程默认端口：3389。</li>
</ol>
<h1 id="后台启动-使用nohup，以服务端为例子，客户端类似"><a href="#后台启动-使用nohup，以服务端为例子，客户端类似" class="headerlink" title="后台启动(使用nohup，以服务端为例子，客户端类似)"></a>后台启动(使用nohup，以服务端为例子，客户端类似)</h1><p>启动（进入frp目录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup .&#x2F;frps -c .&#x2F;frps.ini &amp;     #启动服务端 带&amp;符号</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-f620fc22cdf37174.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>启动后会返回相关的pid<br>关闭</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill 19619                     #输入你系统中返回的pid</span><br><span class="line">kill -9 $(pidof frps)          #或者使用这个命令关闭,$(pidof frps)中frps为进程名称客户端为frpc</span><br></pre></td></tr></table></figure>
<p>查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antpl                 #看到7000端口说明后台启动成功(配置文件中配置的frp服务端口)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx负载均衡（centos7）</title>
    <url>/2017/03/24/20170324_Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88centos7%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>亲测原稿。技术来源于网络</p>
<blockquote>
<p>负载至少需要三台以上服务器（或者三个以上访问端口，如果一台机器上开三个不同的端口，访问压力还是在一台服务器上达不到负载的目的，测试可以开三个端口。）</p>
</blockquote>
<blockquote>
<p>使用三台centos7机器，每台都装上nginx<br>192.168.198.229（前置负载）<br>192.168.198.221（web1）<br>192.168.198.222（web2）<br>将域名（<a href="http://www.fz.com）指向前置机（192.168.198.229）" target="_blank" rel="noopener">www.fz.com）指向前置机（192.168.198.229）</a></p>
</blockquote>
<blockquote>
<p>web机器不一定要装nginx也可以使用其他服务器软件，如Apache，Node.js等。</p>
</blockquote>
<a id="more"></a>
<h1 id="Nginx负载配置"><a href="#Nginx负载配置" class="headerlink" title="Nginx负载配置"></a>Nginx负载配置</h1><blockquote>
<p>nginx负载实现主要在前置负载机中配置反向代理到其他机器。</p>
</blockquote>
<ol>
<li>每台服务器可以单独访问，并修改主页显示内容为改机器ip尾号（为了方便测试）<br>前置机负载机：229<br><img src="http://upload-images.jianshu.io/upload_images/4830242-351de6f71073a1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>将域名<a href="http://www.fz.com指向192.168.198.229机器并可以使用域名访问" target="_blank" rel="noopener">www.fz.com指向192.168.198.229机器并可以使用域名访问</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-12c48c1afe0cf9c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>web1：221<br><img src="http://upload-images.jianshu.io/upload_images/4830242-e11be0577f83131d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>web2：222<br><img src="http://upload-images.jianshu.io/upload_images/4830242-da4bc698ee5eee79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>修改前置机conf<br>在http内加入以下代码（大致36行）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream www.fz.com&#123; </span><br><span class="line">      server  192.168.198.221; </span><br><span class="line">      server  192.168.198.222; </span><br><span class="line">	&#125; </span><br><span class="line">	  </span><br><span class="line">	server&#123; </span><br><span class="line">		listen 80; </span><br><span class="line">		server_name www.fz.com; </span><br><span class="line">		location &#x2F; &#123; </span><br><span class="line">			proxy_pass         http:&#x2F;&#x2F;www.fz.com; </span><br><span class="line">			proxy_set_header   Host             $host; </span><br><span class="line">			proxy_set_header   X-Real-IP        $remote_addr; </span><br><span class="line">			proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for; </span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-0fe15025596d4c63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>重启nginx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload         #重新载入配置文件</span><br><span class="line">&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reopen         #重新启动nginx</span><br></pre></td></tr></table></figure>
访问<a href="http://www.fz.com" target="_blank" rel="noopener">http://www.fz.com</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-c678ed750b0e4a33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>刷新页面<br><img src="http://upload-images.jianshu.io/upload_images/4830242-256c22b1d1f46414.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
<p><strong>这个时候发现已经实现了负载。其实要布置多个项目到web机上还需要配置web机上的conf</strong><br>3. 负载比重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、轮询（默认）</span><br><span class="line">每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">2、weight</span><br><span class="line">指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">例如：</span><br><span class="line">upstream www.fz.com&#123; </span><br><span class="line">      server  192.168.198.221 weight&#x3D;1;     #访问比例为1&#x2F;6</span><br><span class="line">      server  192.168.198.222 weight&#x3D;5;     #访问比例为5&#x2F;6</span><br><span class="line">&#125; </span><br><span class="line">3、ip_hash</span><br><span class="line">每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">例如：</span><br><span class="line">upstream www.fz.com&#123;</span><br><span class="line">      ip_hash;</span><br><span class="line">      server  192.168.198.221; </span><br><span class="line">      server  192.168.198.222; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.down 表示单前的server暂时不参与负载<br>2.weight 默认为1.weight越大，负载的权重就越大。<br>3.max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>4.fail_timeout:max_fails次失败后，暂停的时间。<br>5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。<br>nginx支持同时设置多组的负载均衡，用来给不用的server来使用<br>client_body_in_file_only 设置为On 可以讲client post过来的数据记录到文件中用来做debug<br>client_body_temp_path 设置记录文件的目录 可以设置最多3层目录<br>location 对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</p>
</blockquote>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql主从设置</title>
    <url>/2017/03/16/20170316_Mysql%E4%B8%BB%E4%BB%8E%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote>
<p>两台linux服务器进行主从实验<br>mysql：mysql-5.7.16-1.el7.x86_64.rpm-bundle.tar<br>主（写）：192.168.198.221<br>从（读）：192.168.198.222<br>需要mysql初始环境一样</p>
</blockquote>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><blockquote>
<ol>
<li>主服务器建立2进制日志，每产生语句或磁盘变化，写进日志</li>
<li>从服务器监听主服务器建立relaylog（中继日志）</li>
<li>主服务器建立授权复制账号，从服务器利用复制账号来监听主服务器的日志notice：<br>所有的mysql服务器都有1个独一无二的id  server_id</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="主从设置"><a href="#主从设置" class="headerlink" title="主从设置"></a>主从设置</h1><h3 id="第一步，编辑my-cnf"><a href="#第一步，编辑my-cnf" class="headerlink" title="第一步，编辑my.cnf"></a>第一步，编辑my.cnf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure>
<p><strong>主master：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-bin&#x3D;mysql-bin  #写二进制日志 </span><br><span class="line">binlog-format&#x3D;mixed</span><br><span class="line">server-id&#x3D;221   #同一局域网内一般为ip的后3位</span><br></pre></td></tr></table></figure>
<p><strong>从slave：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">relay-log&#x3D;mysql-relay</span><br><span class="line">server-id&#x3D;222       #同一局域网内一般为ip的后3位</span><br></pre></td></tr></table></figure>
<h3 id="第二步：重启-主，从mysql服务"><a href="#第二步：重启-主，从mysql服务" class="headerlink" title="第二步：重启 主，从mysql服务"></a>第二步：重启 主，从mysql服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysqld restart                   #重启</span><br></pre></td></tr></table></figure>
<h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p><strong>主：  创建账号:repl   密码:!QAZ2wsx</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p              ＃进入mysql</span><br><span class="line">grant replication client,replication slave on *.* to &#39;repl&#39;@&#39;%&#39; identified by &#39;!QAZ2wsx;　　　　＃创建账号</span><br><span class="line">show master status;          ＃查看当前master二日志进制状态</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-469578db30f60ed5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>从：  抄主服务器日志，主服务器的日志位置，如上图</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进入mysql</span><br><span class="line">mysql -uroot -p     </span><br><span class="line">#抄主服务器日志</span><br><span class="line">change master to </span><br><span class="line">master_host&#x3D;&#39;192.168.198.221&#39;,</span><br><span class="line">master_user&#x3D;&#39;repl&#39;,</span><br><span class="line">master_password&#x3D;&#39;!QAZ2wsx&#39;, </span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000001&#39;,</span><br><span class="line">master_log_pos&#x3D;457;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-daad31f224c78379.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show  slave status \G   #查看从机slave状态</span><br><span class="line">#如果状态不是配置的机器可以重置  重新执行抄主服务器的代码</span><br><span class="line">reset slave   #重置</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-a7c4d925f7f8892d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br> 启动slave</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start slave;       #启动slave</span><br><span class="line">show slave status \G   #再次查看从机slave状态</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-a665d378c856fc40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong>主：插入测试数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建数据库--</span><br><span class="line">CREATE DATABASE test;</span><br><span class="line">-- 进入数据库--</span><br><span class="line">use test;</span><br><span class="line">-- 创建表--</span><br><span class="line">CREATE TABLE &#96;test&#96; (</span><br><span class="line"> &#96;id&#96; INT NOT NULL,</span><br><span class="line"> &#96;test&#96; VARCHAR (255) NULL,</span><br><span class="line"> PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br><span class="line">-- 插入数据--</span><br><span class="line">INSERT INTO &#96;test&#96;.&#96;test&#96; (&#96;id&#96;, &#96;test&#96;) VALUES (&#39;1&#39;, &#39;1&#39;);</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-2d87b3e1753597fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>主：查看数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM &#96;test&#96;;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-428e7eced8c9fb07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>从：查看数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 进入test数据库 --</span><br><span class="line">use test;</span><br><span class="line">-- 查看数据-- </span><br><span class="line">SELECT * FROM &#96;test&#96;;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-c2f94c010b30c4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp 3.2.3 Mongodb配置</title>
    <url>/2017/03/14/20170314_Thinkphp%203.2.3%20Mongodb%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>tp3.2.2的Mongodb好像是有bug的，不能直接使用M()方法</p>
<blockquote>
<ol>
<li>确认已经安装了Mongodb服务器</li>
<li>确认php中已经安装了Mongodb扩展</li>
<li>TP版本：thinkphp_3.2.3_full.zip</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="修改Mongodb驱动类"><a href="#修改Mongodb驱动类" class="headerlink" title="修改Mongodb驱动类"></a>修改Mongodb驱动类</h1><p>修改ThinkPHP\Library\Think\Db\Driver\Mongo.class.php文件<br>搜索switchCollection方法，大概第77行添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elseif(empty($db) &amp;&amp; !$this-&gt;_mongo)&#123;</span><br><span class="line">       &#x2F;&#x2F; 当前MongoDb对象</span><br><span class="line">       $this-&gt;_dbName &#x3D; $this-&gt;config[&#39;database&#39;];</span><br><span class="line">       $this-&gt;_mongo &#x3D; $this-&gt;_linkID-&gt;selectDb($this-&gt;_dbName);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>switchCollection完整方法<br><img src="http://upload-images.jianshu.io/upload_images/4830242-fa3a86a5dbf4ad24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>修改完以后其他操作和mysql使用一样</strong></p>
<h1 id="config配置"><a href="#config配置" class="headerlink" title="config配置"></a>config配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Mongodb数据库设置</span><br><span class="line">&#39;DB_TYPE&#39; &#x3D;&gt; &#39;mongo&#39;,               &#x2F;&#x2F; 数据库类型</span><br><span class="line">&#39;DB_PORT&#39; &#x3D;&gt; &#39;27017&#39;,               &#x2F;&#x2F; 端口</span><br><span class="line">&#39;DB_PREFIX&#39; &#x3D;&gt; &#39;t_&#39;,                &#x2F;&#x2F; 数据库表前缀</span><br><span class="line">&#39;DB_HOST&#39; &#x3D;&gt; &#39;127.0.0.1&#39;,           &#x2F;&#x2F; 服务器地址</span><br><span class="line">&#39;DB_NAME&#39; &#x3D;&gt; &#39;bdata&#39;,               &#x2F;&#x2F; 数据库名</span><br><span class="line">&#39;DB_USER&#39; &#x3D;&gt; &#39;admin&#39;,               &#x2F;&#x2F; 用户名</span><br><span class="line">&#39;DB_PWD&#39; &#x3D;&gt; &#39;111111&#39;,               &#x2F;&#x2F; 密码</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function index()&#123;</span><br><span class="line">        $test[&#39;a&#39;]&#x3D;&#39;123&#39;;</span><br><span class="line">        $test[&#39;b&#39;]&#x3D;&#39;1234&#39;;</span><br><span class="line">        $test[&#39;c&#39;][&#39;a&#39;]&#x3D;&#39;ca123&#39;;</span><br><span class="line">        $test[&#39;c&#39;][&#39;b&#39;]&#x3D;&#39;cb123&#39;;</span><br><span class="line">        </span><br><span class="line">        M(&#39;test&#39;)-&gt;add($test);</span><br><span class="line">        </span><br><span class="line">        $data&#x3D;M(&#39;test&#39;)-&gt;select();</span><br><span class="line">        dump($data);</span><br><span class="line">        </span><br><span class="line">        exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-cb67cd3be5c59928.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>使用Mongodb管理工具查看<br><img src="http://upload-images.jianshu.io/upload_images/4830242-0e30ed2a84fef96a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>Thinkphp 3.2.3 redis缓存</title>
    <url>/2017/03/14/20170314_Thinkphp%203.2.3%20redis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>好像是tp3.2的bug,自带的redis驱动不是那么好用。。。找了方法修改优化了一下，亲测可用。</p>
<blockquote>
<ol>
<li>确认已经安装了redis服务器</li>
<li>确认php中已经安装了redis扩展</li>
<li>TP版本：thinkphp_3.2.3_full.zip</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="S缓存使用redis"><a href="#S缓存使用redis" class="headerlink" title="S缓存使用redis"></a>S缓存使用redis</h1><p>复制以下内容到文本中，改名为Redis.class.php。<br>替换ThinkPHP\Library\Think\Cache\Driver\Redis.class.php<em>（注意先备份）</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; | ThinkPHP [ WE CAN DO IT JUST THINK IT ]</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; | Copyright (c) 2006-2013 http:&#x2F;&#x2F;thinkphp.cn All rights reserved.</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; | Licensed ( http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0 )</span><br><span class="line">&#x2F;&#x2F; +----------------------------------------------------------------------</span><br><span class="line">namespace Think\Cache\Driver;</span><br><span class="line">use Think\Cache;</span><br><span class="line">defined(&#39;THINK_PATH&#39;) or exit();</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Redis缓存驱动</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Redis extends Cache &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 架构函数</span><br><span class="line">     * @param array $options 缓存参数</span><br><span class="line">     * @access public</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function __construct($options&#x3D;array()) &#123;</span><br><span class="line">        if ( !extension_loaded(&#39;redis&#39;) ) &#123;</span><br><span class="line">            E(L(&#39;_NOT_SUPPERT_&#39;).&#39;:redis&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(empty($options)) &#123;</span><br><span class="line">            $options &#x3D; array (</span><br><span class="line">                &#39;host&#39;          &#x3D;&gt; C(&#39;REDIS_HOST&#39;) ? C(&#39;REDIS_HOST&#39;) : &#39;127.0.0.1&#39;,</span><br><span class="line">                &#39;port&#39;          &#x3D;&gt; C(&#39;REDIS_PORT&#39;) ? C(&#39;REDIS_PORT&#39;) : 6379,</span><br><span class="line">                &#39;timeout&#39;       &#x3D;&gt; C(&#39;REDIS_TIMEOUT&#39;) ? C(&#39;REDIS_TIMEOUT&#39;) : false,</span><br><span class="line">                &#39;auth&#39;		&#x3D;&gt; C(&#39;REDIS_AUTH&#39;) ? C(&#39;REDIS_AUTH&#39;):null,&#x2F;&#x2F;auth认证</span><br><span class="line">                &#39;persistent&#39;    &#x3D;&gt; C(&#39;REDIS_PERSISTENT&#39;) ? C(&#39;REDIS_PERSISTENT&#39;) : false,</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;options &#x3D;  $options;</span><br><span class="line">        $this-&gt;options[&#39;expire&#39;] &#x3D;  isset($options[&#39;expire&#39;])?  $options[&#39;expire&#39;]  :   C(&#39;DATA_CACHE_TIME&#39;);</span><br><span class="line">        $this-&gt;options[&#39;prefix&#39;] &#x3D;  isset($options[&#39;prefix&#39;])?  $options[&#39;prefix&#39;]  :   C(&#39;DATA_CACHE_PREFIX&#39;);</span><br><span class="line">        $this-&gt;options[&#39;length&#39;] &#x3D;  isset($options[&#39;length&#39;])?  $options[&#39;length&#39;]  :   0;</span><br><span class="line">        $func &#x3D; $options[&#39;persistent&#39;] ? &#39;pconnect&#39; : &#39;connect&#39;;</span><br><span class="line">        $this-&gt;handler  &#x3D; new \Redis;</span><br><span class="line">        $options[&#39;timeout&#39;] &#x3D;&#x3D;&#x3D; false ?</span><br><span class="line">            $this-&gt;handler-&gt;$func($options[&#39;host&#39;], $options[&#39;port&#39;]) :</span><br><span class="line">            $this-&gt;handler-&gt;$func($options[&#39;host&#39;], $options[&#39;port&#39;], $options[&#39;timeout&#39;]);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Auth参数</span><br><span class="line">        if($this-&gt;options[&#39;auth&#39;]!&#x3D;null)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;handler-&gt;auth($this-&gt;options[&#39;auth&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 读取缓存</span><br><span class="line">     * @access public</span><br><span class="line">     * @param string $name 缓存变量名</span><br><span class="line">     * @return mixed</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function get($name) &#123;</span><br><span class="line">        N(&#39;cache_read&#39;,1);</span><br><span class="line">        $value &#x3D; $this-&gt;handler-&gt;get($this-&gt;options[&#39;prefix&#39;].$name);</span><br><span class="line">        $jsonData  &#x3D; json_decode( $value, true );</span><br><span class="line">        return ($jsonData &#x3D;&#x3D;&#x3D; NULL) ? $value : $jsonData;	&#x2F;&#x2F;检测是否为JSON数据 true 返回JSON解析数组, false返回源数据</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 写入缓存</span><br><span class="line">     * @access public</span><br><span class="line">     * @param string $name 缓存变量名</span><br><span class="line">     * @param mixed $value  存储数据</span><br><span class="line">     * @param integer $expire  有效时间（秒）</span><br><span class="line">     * @return boolean</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function set($name, $value, $expire &#x3D; null) &#123;</span><br><span class="line">        N(&#39;cache_write&#39;,1);</span><br><span class="line">        if(is_null($expire)) &#123;</span><br><span class="line">            $expire  &#x3D;  $this-&gt;options[&#39;expire&#39;];</span><br><span class="line">        &#125;</span><br><span class="line">        $name   &#x3D;   $this-&gt;options[&#39;prefix&#39;].$name;</span><br><span class="line">        &#x2F;&#x2F;对数组&#x2F;对象数据进行缓存处理，保证数据完整性</span><br><span class="line">        $value  &#x3D;  (is_object($value) || is_array($value)) ? json_encode($value) : $value;</span><br><span class="line">        if(is_int($expire)) &#123;</span><br><span class="line">            $result &#x3D; $this-&gt;handler-&gt;setex($name, $expire, $value);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $result &#x3D; $this-&gt;handler-&gt;set($name, $value);</span><br><span class="line">        &#125;</span><br><span class="line">        if($result &amp;&amp; $this-&gt;options[&#39;length&#39;]&gt;0) &#123;</span><br><span class="line">            &#x2F;&#x2F; 记录缓存队列</span><br><span class="line">            $this-&gt;queue($name);</span><br><span class="line">        &#125;</span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除缓存</span><br><span class="line">     * @access public</span><br><span class="line">     * @param string $name 缓存变量名</span><br><span class="line">     * @return boolean</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function rm($name) &#123;</span><br><span class="line">        return $this-&gt;handler-&gt;delete($this-&gt;options[&#39;prefix&#39;].$name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 清除缓存</span><br><span class="line">     * @access public</span><br><span class="line">     * @return boolean</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function clear() &#123;</span><br><span class="line">        return $this-&gt;handler-&gt;flushDB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-dd5dbf2fbf13fe47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="SESSION使用redis"><a href="#SESSION使用redis" class="headerlink" title="SESSION使用redis"></a>SESSION使用redis</h1><p>复制以下内容到文本中，改名为Redis.class.php。<br>复制到ThinkPHP\Library\Think\Session\Driver\Redis.class.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *  +----------------------------------------------------------------------</span><br><span class="line"> *  | ThinkPHP [ WE CAN DO IT JUST THINK IT ]</span><br><span class="line"> *  +----------------------------------------------------------------------</span><br><span class="line"> *  | Copyright (c) 2006-2013 http:&#x2F;&#x2F;thinkphp.cn All rights reserved.</span><br><span class="line"> *  +----------------------------------------------------------------------</span><br><span class="line"> *  | Licensed ( http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0 )</span><br><span class="line"> *  +---------------------------------------------------------------------- </span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">namespace Think\Session\Driver;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Redis Session驱动 </span><br><span class="line"> *&#x2F;</span><br><span class="line">class Redis &#123;</span><br><span class="line">	</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * Redis句柄</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	private $handler;</span><br><span class="line">	private $get_result;</span><br><span class="line"></span><br><span class="line">	public function __construct()&#123;</span><br><span class="line">		if ( !extension_loaded(&#39;redis&#39;) ) &#123;</span><br><span class="line">            E(L(&#39;_NOT_SUPPERT_&#39;).&#39;:redis&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(empty($options)) &#123;</span><br><span class="line">            $options &#x3D; array (</span><br><span class="line">                &#39;host&#39;          &#x3D;&gt; C(&#39;REDIS_HOST&#39;) ? C(&#39;REDIS_HOST&#39;) : &#39;127.0.0.1&#39;,</span><br><span class="line">                &#39;port&#39;          &#x3D;&gt; C(&#39;REDIS_PORT&#39;) ? C(&#39;REDIS_PORT&#39;) : 6379,</span><br><span class="line">                &#39;timeout&#39;       &#x3D;&gt; C(&#39;REDIS_TIMEOUT&#39;) ? C(&#39;REDIS_TIMEOUT&#39;) : false,</span><br><span class="line">                &#39;persistent&#39;    &#x3D;&gt; C(&#39;REDIS_PERSISTENT&#39;) ? C(&#39;REDIS_PERSISTENT&#39;) : false,</span><br><span class="line">		&#39;auth&#39;		&#x3D;&gt; C(&#39;REDIS_AUTH&#39;) ? C(&#39;REDIS_AUTH&#39;) : false,</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">		$options[&#39;host&#39;] &#x3D; explode(&#39;,&#39;, $options[&#39;host&#39;]);</span><br><span class="line">		$options[&#39;port&#39;] &#x3D; explode(&#39;,&#39;, $options[&#39;port&#39;]);</span><br><span class="line">		$options[&#39;auth&#39;] &#x3D; explode(&#39;,&#39;, $options[&#39;auth&#39;]);</span><br><span class="line">		foreach ($options[&#39;host&#39;] as $key&#x3D;&gt;$value) &#123;</span><br><span class="line">			if (!isset($options[&#39;port&#39;][$key])) &#123;</span><br><span class="line">				$options[&#39;port&#39;][$key] &#x3D; $options[&#39;port&#39;][0];</span><br><span class="line">			&#125;</span><br><span class="line">			if (!isset($options[&#39;auth&#39;][$key])) &#123;</span><br><span class="line">				$options[&#39;auth&#39;][$key] &#x3D; $options[&#39;auth&#39;][0];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        $this-&gt;options &#x3D;  $options;</span><br><span class="line">	$expire &#x3D; C(&#39;SESSION_EXPIRE&#39;);</span><br><span class="line">        $this-&gt;options[&#39;expire&#39;] &#x3D;  isset($expire) ? (int)$expire : (int)ini_get(&#39;session.gc_maxlifetime&#39;);;</span><br><span class="line">        $this-&gt;options[&#39;prefix&#39;] &#x3D;  isset($options[&#39;prefix&#39;]) ?  $options[&#39;prefix&#39;]  :   C(&#39;SESSION_PREFIX&#39;);</span><br><span class="line">        $this-&gt;handler  &#x3D; new \Redis;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 连接Redis服务端</span><br><span class="line">	 * @access public</span><br><span class="line">	 * @param bool $is_master : 是否连接主服务器</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function connect($is_master &#x3D; true) &#123;</span><br><span class="line">		if ($is_master) &#123;</span><br><span class="line">			$i &#x3D; 0;</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			$count &#x3D; count($this-&gt;options[&#39;host&#39;]);</span><br><span class="line">			if ($count &#x3D;&#x3D; 1) &#123;</span><br><span class="line">				$i &#x3D; 0;</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				$i &#x3D; rand(1, $count - 1);	&#x2F;&#x2F;多个从服务器随机选择</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		$func &#x3D; $this-&gt;options[&#39;persistent&#39;] ? &#39;pconnect&#39; : &#39;connect&#39;;</span><br><span class="line">		try &#123;</span><br><span class="line">			if ($this-&gt;options[&#39;timeout&#39;] &#x3D;&#x3D;&#x3D; false) &#123;</span><br><span class="line">				$result &#x3D; $this-&gt;handler-&gt;$func($this-&gt;options[&#39;host&#39;][$i], $this-&gt;options[&#39;port&#39;][$i]);</span><br><span class="line">				if (!$result)</span><br><span class="line">					throw new \Think\Exception(&#39;Redis Error&#39;, 100);</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				$result &#x3D; $this-&gt;handler-&gt;$func($this-&gt;options[&#39;host&#39;][$i], $this-&gt;options[&#39;port&#39;][$i], $this-&gt;options[&#39;timeout&#39;]);</span><br><span class="line">				if (!$result)</span><br><span class="line">					throw new \Think\Exception(&#39;Redis Error&#39;, 101);</span><br><span class="line">			&#125;</span><br><span class="line">			if ($this-&gt;options[&#39;auth&#39;][$i]) &#123;</span><br><span class="line">				$result &#x3D; $this-&gt;handler-&gt;auth($this-&gt;options[&#39;auth&#39;][$i]);</span><br><span class="line">				if (!$result) &#123;</span><br><span class="line">					throw new \Think\Exception(&#39;Redis Error&#39;, 102);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch ( \Exception $e ) &#123;</span><br><span class="line">			exit(&#39;Error Message:&#39;.$e-&gt;getMessage().&#39;&lt;br&gt;Error Code:&#39;.$e-&gt;getCode().&#39;&#39;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;**</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * 打开Session </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @access public </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @param string $savePath </span><br><span class="line">	 * @param mixed $sessName  </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function open($savePath, $sessName) &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;**</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * 关闭Session </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @access public </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function close() &#123;</span><br><span class="line">		if ($this-&gt;options[&#39;persistent&#39;] &#x3D;&#x3D; &#39;pconnect&#39;) &#123;</span><br><span class="line">			$this-&gt;handler-&gt;close();</span><br><span class="line">		&#125;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * 读取Session </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @access public </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @param string $sessID </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function read($sessID) &#123;</span><br><span class="line">		$this-&gt;connect(0);</span><br><span class="line">		$this-&gt;get_result &#x3D; $this-&gt;handler-&gt;get($this-&gt;options[&#39;prefix&#39;].$sessID);</span><br><span class="line">        &#x2F;&#x2F;延长有效期</span><br><span class="line">        $this-&gt;handler-&gt;expire($this-&gt;options[&#39;prefix&#39;].$sessID,C(&#39;SESSION_EXPIRE&#39;));</span><br><span class="line">        return $this-&gt;get_result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * 写入Session </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @access public </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @param string $sessID </span><br><span class="line">	 * @param String $sessData  </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function write($sessID, $sessData) &#123;</span><br><span class="line">		if (!$sessData || $sessData &#x3D;&#x3D; $this-&gt;get_result) &#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">		$this-&gt;connect(1);</span><br><span class="line">        $expire  &#x3D;  $this-&gt;options[&#39;expire&#39;];</span><br><span class="line">        $sessID   &#x3D;   $this-&gt;options[&#39;prefix&#39;].$sessID;</span><br><span class="line">        if(is_int($expire) &amp;&amp; $expire &gt; 0) &#123;</span><br><span class="line">            $result &#x3D; $this-&gt;handler-&gt;setex($sessID, $expire, $sessData);</span><br><span class="line">			$re &#x3D; $result ? &#39;true&#39; : &#39;false&#39;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $result &#x3D; $this-&gt;handler-&gt;set($sessID, $sessData);</span><br><span class="line">			$re &#x3D; $result ? &#39;true&#39; : &#39;false&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        return $result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * 删除Session </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @access public </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @param string $sessID </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function destroy($sessID) &#123;</span><br><span class="line">		$this-&gt;connect(1);</span><br><span class="line">        return $this-&gt;handler-&gt;delete($this-&gt;options[&#39;prefix&#39;].$sessID);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * Session 垃圾回收</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @access public </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @param string $sessMaxLifeTime </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function gc($sessMaxLifeTime) &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * 打开Session </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @access public </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 * @param string $savePath </span><br><span class="line">	 * @param mixed $sessName  </span><br><span class="line">	  +----------------------------------------------------------</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public function execute() &#123;</span><br><span class="line">		session_set_save_handler(</span><br><span class="line">				array(&amp;$this, &quot;open&quot;),</span><br><span class="line">				array(&amp;$this, &quot;close&quot;),</span><br><span class="line">				array(&amp;$this, &quot;read&quot;),</span><br><span class="line">				array(&amp;$this, &quot;write&quot;),</span><br><span class="line">				array(&amp;$this, &quot;destroy&quot;),</span><br><span class="line">				array(&amp;$this, &quot;gc&quot;)</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public function __destruct() &#123;</span><br><span class="line">		if ($this-&gt;options[&#39;persistent&#39;] &#x3D;&#x3D; &#39;pconnect&#39;) &#123;</span><br><span class="line">			$this-&gt;handler-&gt;close();</span><br><span class="line">		&#125;</span><br><span class="line">		session_write_close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-e772a2b5cd90a2fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="config-配置"><a href="#config-配置" class="headerlink" title="config 配置"></a>config 配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;SESSION 配置</span><br><span class="line">&#39;SESSION_AUTO_START&#39; &#x3D;&gt; true, &#x2F;&#x2F;是否开启session</span><br><span class="line">&#39;SESSION_TYPE&#39;          &#x3D;&gt;  &#39;Redis&#39;,    &#x2F;&#x2F;session 驱动</span><br><span class="line">&#39;SESSION_PREFIX&#39;        &#x3D;&gt;  &#39;sess_&#39;,    &#x2F;&#x2F;session前缀</span><br><span class="line">&#39;SESSION_EXPIRE&#39;        &#x3D;&gt;  &#39;7200&#39;,        &#x2F;&#x2F;session有效期(单位:秒) 0表示永久缓存，当session被访问时，时间重新计算。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;缓存 配置</span><br><span class="line">&#39;DATA_CACHE_TYPE&#39;&#x3D;&gt;&#39;Redis&#39;,&#x2F;&#x2F;默认动态缓存为Redis</span><br><span class="line">&#39;DATA_CACHE_PREFIX&#39; &#x3D;&gt; &#39;Redis_&#39;,&#x2F;&#x2F;缓存前缀</span><br><span class="line">&#39;DATA_CACHE_TIME&#39;       &#x3D;&gt;  &#39;0&#39;,    &#x2F;&#x2F;缓存时间 0为永久 当缓存被访问时，时间不重新计算</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Redis 配置</span><br><span class="line">&#39;REDIS_RW_SEPARATE&#39; &#x3D;&gt; true, &#x2F;&#x2F;Redis读写分离 true 开启</span><br><span class="line">&#39;REDIS_HOST&#39;&#x3D;&gt;&#39;127.0.0.1&#39;, &#x2F;&#x2F;redis服务器ip，多台用逗号隔开；读写分离开启时，第一台负责写，其它[随机]负责读；</span><br><span class="line">&#39;REDIS_PORT&#39;&#x3D;&gt;&#39;6379&#39;,&#x2F;&#x2F;端口号</span><br><span class="line">&#39;REDIS_TIMEOUT&#39;&#x3D;&gt;&#39;30&#39;,&#x2F;&#x2F;超时时间(秒)</span><br><span class="line">&#39;REDIS_PERSISTENT&#39;&#x3D;&gt;false,&#x2F;&#x2F;是否长连接 false&#x3D;短连接</span><br><span class="line">&#39;REDIS_AUTH&#39;&#x3D;&gt;&#39;123456&#39;,&#x2F;&#x2F;AUTH认证密码</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function index()&#123;</span><br><span class="line">        $test[&#39;a&#39;]&#x3D;&#39;123&#39;;</span><br><span class="line">        $test[&#39;b&#39;]&#x3D;&#39;1234&#39;;</span><br><span class="line">        $test[&#39;c&#39;][&#39;a&#39;]&#x3D;&#39;ca123&#39;;</span><br><span class="line">        $test[&#39;c&#39;][&#39;b&#39;]&#x3D;&#39;cb123&#39;;</span><br><span class="line">        </span><br><span class="line">        S(&#39;test&#39;,$test);</span><br><span class="line">        $_SESSION[&#39;test&#39;]&#x3D;$test;</span><br><span class="line">        </span><br><span class="line">        echo &quot;S缓存:&lt;&#x2F; br&gt;&quot;;</span><br><span class="line">        dump(S(&#39;test&#39;));</span><br><span class="line">        echo &quot;SESSION:&lt;&#x2F; br&gt;&quot;;</span><br><span class="line">        dump($_SESSION[&#39;test&#39;]);</span><br><span class="line"></span><br><span class="line">        exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-1f72a0c871023542.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>使用redis管理工具查看<br><img src="http://upload-images.jianshu.io/upload_images/4830242-7927704807933170.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>Redis基础配置</title>
    <url>/2017/03/09/20170309_Redis%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Redis基本配置（win2012）"><a href="#Redis基本配置（win2012）" class="headerlink" title="Redis基本配置（win2012）"></a>Redis基本配置（win2012）</h1><ol>
<li>允许其他机器连接<br>搜索bind找到bind 127.0.0.1 改成以下代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind 0.0.0.0</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<img src="http://upload-images.jianshu.io/upload_images/4830242-34dc911304d13e63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>持久化保存<br>AOF持久化设置<br>aof可以实现每次操作都持久化。<br>搜索appendonly把 no改成yes<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendonly no       #关闭AOF  </span><br><span class="line">appendonly yes      #打开AOF</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-3ee0c1c1e0c918aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>再找到appendfsync <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># appendfsync always   #每次收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用  </span><br><span class="line">appendfsync everysec     #每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，推荐  </span><br><span class="line"># appendfsync no    #完全依赖os，性能最好,持久化没保证</span><br></pre></td></tr></table></figure>
RDB持久化设置<br>rdb是记录一段时间内的操作，一盘的配置是一段时间内操作超过多少次就持久化。<br>默认情况下Redis在磁盘上创建二进制格式的命名为dump.rdb的数据快照。可以通过配置文件配置每隔N秒且数据集上至少有M个变化时创建快照、是否对数据进行压缩、快照名称、存放快照的工作目录。redis 2.4.10的默认配置如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#900秒后且至少1个key发生变化时创建快照  </span><br><span class="line">save 900 1  </span><br><span class="line">#300秒后且至少10个key发生变化时创建快照  </span><br><span class="line">save 300 10  </span><br><span class="line">#60秒后且至少10000个key发生变化时创建快照  </span><br><span class="line">save 60 10000  </span><br><span class="line">#可通过注释所有save开头的行来禁用RDB持久化  </span><br><span class="line">#创建快照时对数据进行压缩  </span><br><span class="line">rdbcompression yes  </span><br><span class="line">#快照名称  </span><br><span class="line">dbfilename dump.rdb  </span><br><span class="line">#存放快照的目录（AOF文件也会被存放在此目录）  </span><br><span class="line">dir &#x2F;var&#x2F;lib&#x2F;redis&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>增加密码<br>搜索requirepass修改如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requirepass 123456   #修改密码为123456</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-fa3f6e5c539294c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>win后台启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.进入 DOS窗口</span><br><span class="line">2.在进入Redis的安装目录</span><br><span class="line">3.输入：redis-server --service-install redis.windows.conf --loglevel verbose ( 安装redis服务 )</span><br><span class="line">4.输入：redis-server --service-start ( 启动服务 )</span><br><span class="line">5.输入：redis-server --service-stop</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx+php+MySql(win sercer2012)</title>
    <url>/2017/03/02/20170302_Nginx+php+MySql(win%20sercer2012)/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>亲测原稿。以  <code>D:\wnmp</code>  目录为例<em>（实际目录可自行更改）</em></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>软件包下载地址</p>
<blockquote>
<p>Nginx官网：<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a><br>Mysql官网：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a><br>PHP官网：<a href="http://www.php.net/" target="_blank" rel="noopener">http://www.php.net/</a></p>
</blockquote>
<a id="more"></a>
<p>本教程使用软件</p>
<blockquote>
<p>nginx-1.11.6.zip<br>  mysql-5.7.16-winx64.zip<br>  php-5.6.28-nts-Win32-VC11-x64.zip<br>RunHiddenConsole.exe        （后台以cgi启动nginx+php使用，没找到官网，自行百度下载）</p>
</blockquote>
<p>php版本说明</p>
<blockquote>
<p>non-thread-safe 非线程安全 与IIS 搭配环境<br>thread-safe 线程安全与apache 搭配的环境<br>php还有 VC6 VC9版本 区分VC6和VC9一个支持apache一个支持IIS<br>VC9 用在apache上也没问题<br>如果是以FastCGI方式（搭配IIS、nginx）来执行PHP ，都建议下载、执行 non-thread safe 版本的 PHP</p>
</blockquote>
<p>在D盘建立wnmp目录并在wnmp目录下建立  nginx,  mysql,  php-5.6, www目录，将软件解压到对应目录下。<em>（D:\wnmp\www为代码目录）</em><br><img src="http://upload-images.jianshu.io/upload_images/4830242-4ca9be7f5e42e25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><ol>
<li>进入D:\wnmp\nginx目录下，双击运行nginx.exe文件。然后用浏览器打开<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 出现Welcome to nginx!   成功。<br><img src="http://upload-images.jianshu.io/upload_images/4830242-d5f5a735f1ba3fc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
<h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><ol>
<li><p>进入D:\wnmp\php-5.6目录将php.ini-development复制一份改名为php.ini<br><img src="http://upload-images.jianshu.io/upload_images/4830242-62303b38254f9eab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>打开D:\wamp\php-5.6\php.ini文件 搜索extension_dir = “ext”，修为如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension_dir &#x3D; &quot;d:&#x2F;wnmp&#x2F;php-5.6&#x2F;ext&#x2F;&quot;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-6f7b3aff70d70f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>搜索“date.timezone”，找到：;date.timezone = 先去前面的分号再改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date.timezone &#x3D; Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-d825dcd559b1217e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>搜索“enable_dl”，找到：enable_dl = Off 改为 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable_dl &#x3D; On</span><br></pre></td></tr></table></figure>
<p>搜索“cgi.force_redirect” ;cgi.force_redirect = 1 先去前面的分号再改为 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cgi.force_redirect &#x3D; 0</span><br></pre></td></tr></table></figure>
<p>搜索“fastcgi.impersonate”，找到： ;fastcgi.impersonate = 1 去掉前面的分号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastcgi.impersonate &#x3D; 1</span><br></pre></td></tr></table></figure>
<p>搜索“cgi.rfc2616_headers”，找到：;cgi.rfc2616_headers = 0 先去前面的分号再改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cgi.rfc2616_headers &#x3D; 1</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">搜索“php_mysql”，找到：”extension&#x3D;php_mysql.dll和extension&#x3D;php_mysqli.dll  去掉前面的“;”（支持MYSQL数据库）</span><br></pre></td></tr></table></figure>
<p>extension=php_mysql.dll<br>extension=php_mysqli.dll </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其他的配置按照自己的需要更改。</span><br><span class="line">3. 进入D:\wnmp\nginx\conf目录，打开修改nginx.conf文件</span><br><span class="line">1)大概第43~45行之间的内容</span><br><span class="line">![](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;4830242-bc1694065664d1be.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">修改如下</span><br></pre></td></tr></table></figure>
<p>location / {</p>
<pre><code>    root   D:/wnmp/www;
    index  index.html index.htm inde.php;
}</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2)支持php的设置,大概在第65-71行的</span><br><span class="line">![](http:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;4830242-d0183a0982a68409.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">先将前面的“#”去掉，同样将root  html;改为root  D:&#x2F;wnmp&#x2F;www;。再把“&#x2F;scripts”改为“$document_root”，这里的“$document_root”就是指前面“root”所指的站点路径，修改完成如如下</span><br><span class="line">&#96;&#96;&#96;       </span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root           D:&#x2F;wnmp&#x2F;www;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在D:\wnmp\www目录内新建1.php文件，并写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">        phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>进入D:\wnmp\php-5.6目录，安装shift键点击右键 <strong>在此处打开命令窗口</strong> 输入以下命令行启动php<em>（命令窗口不能关闭，属于前台运行模式）</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php-cgi.exe -b 127.0.0.1:9000-c D:\wnmp\php-5.6\php.ini</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-a2e2d0676ffbfbb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>进入D:\wnmp\nginx 安装shift键点击右键 <strong>在此处打开命令窗口</strong> 输入以下命令行重启动nginx<em>(命令窗口不能关闭，属于前台运行模式)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx.exe -s stop    #停止nginx</span><br><span class="line">nginx.exe            #启动nginx</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-9bf6598433e34605.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>使用浏览器打开<a href="http://localhost/1.php" target="_blank" rel="noopener">http://localhost/1.php</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-cd7ca879a4cafdb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>nginx-php小工具<br>将RunHiddenConsole.exe文件复制到nginx根目录下（D:\wnmp\nginx）<br><img src="http://upload-images.jianshu.io/upload_images/4830242-36a6fecc4ce30ab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>在D:\wnmp\nginx目录内新建文本文件粘贴以下内容（注意路径）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cls </span><br><span class="line">@ECHO OFF </span><br><span class="line">SET NGINX_PATH&#x3D;D: </span><br><span class="line">SET NGINX_DIR&#x3D;D:\wnmp\nginx\</span><br><span class="line">color 0a </span><br><span class="line">TITLE Nginx Management  </span><br><span class="line">GOTO MENU </span><br><span class="line">:MENU </span><br><span class="line">CLS </span><br><span class="line">ECHO. </span><br><span class="line">ECHO. * * * *  Nginx Management  * * * * * * * * * * * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 1 启动Nginx * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 2 关闭Nginx * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 3 重启Nginx * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 4 退 出 * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 5 启动Nginx-PHP环境 * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 6 关闭Nginx-PHP环境 * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.请输入选择项目的序号： </span><br><span class="line">set &#x2F;p ID&#x3D; </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;1&quot; GOTO cmd1 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;2&quot; GOTO cmd2 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;3&quot; GOTO cmd3 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;5&quot; GOTO cmd5</span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;6&quot; GOTO cmd6</span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;4&quot; EXIT </span><br><span class="line">PAUSE </span><br><span class="line">:cmd1 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.启动Nginx...... </span><br><span class="line">IF NOT EXIST %NGINX_DIR%nginx.exe ECHO %NGINX_DIR%nginx.exe不存在 </span><br><span class="line">%NGINX_PATH% </span><br><span class="line">cd %NGINX_DIR% </span><br><span class="line">IF EXIST %NGINX_DIR% start %NGINX_DIR%nginx.exe </span><br><span class="line">ECHO.OK </span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd2 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.关闭Nginx...... </span><br><span class="line">taskkill &#x2F;F &#x2F;IM nginx.exe &gt; nul </span><br><span class="line">ECHO.OK </span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd3 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.关闭Nginx...... </span><br><span class="line">taskkill &#x2F;F &#x2F;IM nginx.exe &gt; nul </span><br><span class="line">ECHO.OK </span><br><span class="line">GOTO cmd1 </span><br><span class="line">GOTO MENU</span><br><span class="line">:cmd5 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.启动Nginx-PHP环境......</span><br><span class="line">REM Windows 下无效</span><br><span class="line">REM set PHP_FCGI_CHILDREN&#x3D;5</span><br><span class="line">REM 每个进程处理的最大请求数，或设置为 Windows 环境变量</span><br><span class="line">set PHP_FCGI_MAX_REQUESTS&#x3D;1000 </span><br><span class="line">echo Starting PHP FastCGI...</span><br><span class="line">RunHiddenConsole D:&#x2F;wnmp&#x2F;php-5.6&#x2F;php-cgi.exe -b 127.0.0.1:9000 -c D:&#x2F;wnmp&#x2F;php-5.6&#x2F;php.ini</span><br><span class="line">echo Starting nginx...</span><br><span class="line">RunHiddenConsole D:&#x2F;wnmp&#x2F;nginx&#x2F;nginx.exe -p D:&#x2F;wnmp&#x2F;nginx</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU</span><br><span class="line">:cmd6 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.关闭Nginx-PHP环境......</span><br><span class="line">echo Stopping nginx...  </span><br><span class="line">taskkill &#x2F;F &#x2F;IM nginx.exe &gt; nul</span><br><span class="line">echo Stopping PHP FastCGI...</span><br><span class="line">taskkill &#x2F;F &#x2F;IM php-cgi.exe &gt; nul</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU</span><br></pre></td></tr></table></figure>
<p>并改名为 Nginx管理工具.bat （后缀也要改），双击打开<em>（这时候可以关闭刚才的命令框了）</em><br><img src="http://upload-images.jianshu.io/upload_images/4830242-79ece67e50025fc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>nginx支持thinkphp配置（按需要设置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80 ;</span><br><span class="line">        server_name localhost;</span><br><span class="line">		root   d:&#x2F;wnmp&#x2F;www;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line">		</span><br><span class="line">		error_page  404	&#x2F;404.html;</span><br><span class="line">		location &#x3D; &#x2F;404.html &#123;</span><br><span class="line">			return 404 &#39;Sorry, File not Found!&#39;;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		location &#x2F; &#123;</span><br><span class="line">			try_files $uri @rewrite;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		location @rewrite &#123;</span><br><span class="line">			set $static 0;</span><br><span class="line">			if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) &#123;</span><br><span class="line">				set $static 1;</span><br><span class="line">			&#125;</span><br><span class="line">			if ($static &#x3D; 0) &#123;</span><br><span class="line">				rewrite ^&#x2F;(.*)$ &#x2F;index.php?s&#x3D;&#x2F;$1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">		location ~ &#x2F;Uploads&#x2F;.*\.php$ &#123;</span><br><span class="line">			deny all;</span><br><span class="line">		&#125;</span><br><span class="line">		location ~ \.php&#x2F; &#123;</span><br><span class="line">		   if ($request_uri ~ ^(.+\.php)(&#x2F;.+?)($|\?)) &#123; &#125;</span><br><span class="line">		   fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">		   include fastcgi_params;</span><br><span class="line">		   fastcgi_param SCRIPT_NAME     $1;</span><br><span class="line">		   fastcgi_param PATH_INFO       $2;</span><br><span class="line">		   fastcgi_param SCRIPT_FILENAME $document_root$1;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            #root           d:&#x2F;wnmp&#x2F;www;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            #fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ &#x2F;\.ht &#123;</span><br><span class="line">	      deny  all;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><ol>
<li><p>进入D:\wnmp\mysql，复制my-default.ini文件并改名为my.ini。<br>在D:\wnmp\mysql目录下创建data文件夹，打开my.ini修改如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basedir &#x3D; D:\wnmp\mysql</span><br><span class="line">datadir &#x3D; D:\wnmp\mysql\data</span><br><span class="line">port &#x3D; 3306</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-564641b0dfd7ba71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>进入D:\wnmp\mysql\bin目录下按着shift键点右键， 在此打开命令窗口，（注意必须以管理员身份打开，否则报错。如果不是管理员请以管理员身份打开cmd并进入D:\wnmp\mysql\bin目录）<br>输入以下命令初始化mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --user&#x3D;mysql --console</span><br></pre></td></tr></table></figure>
<p><strong>记录下红色框内的初始密码（密码前面是没有空格的）</strong><br><img src="http://upload-images.jianshu.io/upload_images/4830242-f4e0d9e84daec44d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>执行下面命令将MySQL添加到系统服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install MySQL</span><br></pre></td></tr></table></figure>
<p>执行下面命令启动myslq</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入myslq修改初始密码（进入需要刚才记录的密码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>更改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for root@localhost &#x3D; password(&#39;123456&#39;); （注意分号）</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-d9d6c1157ddcec1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>创建其他用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;用户名&#39;@&#39;%&#39; IDENTIFIED BY &#39;密码&#39;;</span><br></pre></td></tr></table></figure>
<p>添加访问ip，%号代表所有IP都能访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT GRANT OPTION ON *.* TO &#39;账号&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>
<p>添加权限(所有权限)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO &#39;账号&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure></li>
<li><p>mysql 常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql     #启动myslq服务</span><br><span class="line">net stop mysql      #停止mysql服务</span><br></pre></td></tr></table></figure>
<p>mysql管理小工具<br>在D:\wnmp\mysql目录下新建一个文本粘贴如以下内容<em>(自己也可以修改注意路径)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cls </span><br><span class="line">@ECHO OFF </span><br><span class="line">SET Mysql_PATH&#x3D;D: </span><br><span class="line">SET Mysql_DIR&#x3D;D:\wnmp\mysql\bin</span><br><span class="line">color 0a </span><br><span class="line">TITLE Mysql Management  </span><br><span class="line">GOTO MENU </span><br><span class="line">:MENU </span><br><span class="line">CLS </span><br><span class="line">ECHO. </span><br><span class="line">ECHO. * * * *  Mysql Management  * * * * * * * * * * * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 1 启动Mysql * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 2 关闭Mysql * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 3 重启Mysql * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 4 退 出 * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.请输入选择项目的序号： </span><br><span class="line">set &#x2F;p ID&#x3D; </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;1&quot; GOTO cmd1 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;2&quot; GOTO cmd2 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;3&quot; GOTO cmd3 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;4&quot; EXIT </span><br><span class="line">PAUSE </span><br><span class="line">:cmd1 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.启动Mysql...... </span><br><span class="line">cd %Mysql_DIR% </span><br><span class="line">net start mysql</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd2 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.关闭Mysql...... </span><br><span class="line">cd %Mysql_DIR% </span><br><span class="line">net stop mysql</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd3 </span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql </span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>改名字为   Mysql管理工具.bat   （后缀也要改），然后双击打开(需要管理员权限)</strong><br><img src="http://upload-images.jianshu.io/upload_images/4830242-e16cc5edaaa055d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="增加PHP扩展，以redis为例（其他扩展大致相仿按需添加）"><a href="#增加PHP扩展，以redis为例（其他扩展大致相仿按需添加）" class="headerlink" title="增加PHP扩展，以redis为例（其他扩展大致相仿按需添加）"></a>增加PHP扩展，以redis为例（其他扩展大致相仿按需添加）</h1><p>php扩展官方地址<a href="http://pecl.php.net/" target="_blank" rel="noopener">http://pecl.php.net/</a></p>
<ol>
<li>下载redis的DLL文件<em>(注意php版本)</em><br>解压后复制php_redis.dll文件到D:\wnmp\php-5.6\ext目录下<br><img src="http://upload-images.jianshu.io/upload_images/4830242-891b5de6406639db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>打开D:\wnmp\php-5.6下php.ini文件，添加以下代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension&#x3D;php_memcache.dll</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-cca1ae08670b8ae3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>重启nginx-php浏览器里打开<a href="http://localhost/1.php" target="_blank" rel="noopener">http://localhost/1.php</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-bcda15f04e739d1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>Apache+Mysql+PHP(win sercer2012)</title>
    <url>/2017/03/01/20170301_Apache+Mysql+PHP(win%20sercer2012)/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>亲测原稿。以  <code>D:\wamp</code>  目录为例<em>（实际目录可自行更改）</em></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>软件包下载地址</p>
<blockquote>
<p>Apache官网:<a href="https://httpd.apache.org/" target="_blank" rel="noopener">https://httpd.apache.org/</a><br>Mysql官网：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a><br>PHP官网：<a href="http://www.php.net/" target="_blank" rel="noopener">http://www.php.net/</a></p>
</blockquote>
<a id="more"></a>
<p>本教程使用软件</p>
<blockquote>
<p>httpd-2.4.25-x64-vc11-r1.zip<br>  mysql-5.7.16-winx64.zip<br>  php-5.6.30-Win32-VC11-x64.zip</p>
</blockquote>
<p>php版本说明</p>
<blockquote>
<p>non-thread-safe 非线程安全 与IIS 搭配环境<br>thread-safe 线程安全与apache 搭配的环境<br>php还有 VC6 VC9版本 区分VC6和VC9一个支持apache一个支持IIS<br>VC9 用在apache上也没问题<br>如果是以FastCGI方式（搭配IIS、nginx）来执行PHP ，都建议下载、执行 non-thread safe 版本的 PHP</p>
</blockquote>
<p>在D盘建立wamp目录并在wamp目录下建立Apache24,mysql,php目录，将软件解压到对应目录下。<em>（安装好之后D:\wamp\Apache24\htdocs为代码目录）</em><br><img src="http://upload-images.jianshu.io/upload_images/4830242-53f2f46c684a7d6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h1><ol>
<li>修改配置路径，进入D:\wamp\Apache24\conf，打开httpd.conf文件。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查找 Define SRVROOT修改如下信息</span><br><span class="line">Define SRVROOT &quot;D:&#x2F;wamp&#x2F;Apache24&quot;</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-492d7cafc99e4bc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>进入D:\wamp\apache\bin 按住shift键点击鼠标右键，选择在此处打开命令窗口<br><img src="http://upload-images.jianshu.io/upload_images/4830242-ce00ea8174ed6847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>输入httpd -k install,把apache安装成windows后台服务。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">httpd -k install</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-69cf5f1ef66ea975.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><blockquote>
<p><strong>错误问题，无错请跳过</strong><br>MSVCR110.dll下载地址<a href="http://www.microsoft.com/zh-CN/download/details.aspx?id=30679" target="_blank" rel="noopener">http://www.microsoft.com/zh-CN/download/details.aspx?id=30679</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-dd45942444e75e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</blockquote>
</li>
</ol>
<p><strong>如果出现其他补丁错误请自行下载win相应补丁</strong><br>4. 输入services.msc打开服务列表查看是否添加成功并启用apache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">services.msc</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-4bf088d4ab245ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>5. 在浏览器中打开<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-87452bd73a7ef9e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>6. Apache启动小工具<br>在D:\wamp\Apache24目录下新建一个文本粘贴如以下内容<em>(自己也可以修改注意路径)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cls </span><br><span class="line">@ECHO OFF </span><br><span class="line">SET Apache24_PATH&#x3D;D: </span><br><span class="line">SET Apache24_DIR&#x3D;D:\wamp\Apache24\bin</span><br><span class="line">color 0a </span><br><span class="line">TITLE Apache Management  </span><br><span class="line">GOTO MENU </span><br><span class="line">:MENU </span><br><span class="line">CLS </span><br><span class="line">ECHO. </span><br><span class="line">ECHO. * * * *  Apache Management  * * * * * * * * * * * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 1 启动Apache * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 2 关闭Apache * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 3 重启Apache * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 4 退 出 * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.请输入选择项目的序号： </span><br><span class="line">set &#x2F;p ID&#x3D; </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;1&quot; GOTO cmd1 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;2&quot; GOTO cmd2 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;3&quot; GOTO cmd3 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;4&quot; EXIT </span><br><span class="line">PAUSE </span><br><span class="line">:cmd1 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.启动Apache...... </span><br><span class="line">cd %Mysql_DIR% </span><br><span class="line">net start Apache2.4</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd2 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.关闭Apache...... </span><br><span class="line">cd %Mysql_DIR% </span><br><span class="line">net stop Apache2.4</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd3 </span><br><span class="line">net stop Apache2.4</span><br><span class="line">net start Apache2.4 </span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU</span><br></pre></td></tr></table></figure>
<p><strong>改名字为   Apache管理工具.bat   （后缀也要改），然后双击打开</strong><br><img src="http://upload-images.jianshu.io/upload_images/4830242-58f09411600acde0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><ol>
<li>进入D:\wamp\php目录将php.ini-development复制一份改名为php.ini<br><img src="http://upload-images.jianshu.io/upload_images/4830242-bcbbb2989fe5a5e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>打开D:\wamp\Apache24\conf\httpd.conf文件。 在183行插入以下代码。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule php5_module &quot;d:&#x2F;wamp&#x2F;php&#x2F;php5apache2_4.dll&quot;</span><br><span class="line">PHPIniDir &quot;d:&#x2F;wamp&#x2F;php&quot;</span><br><span class="line">AddType application&#x2F;x-httpd-php .php .phtml</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-673162c5f00cf3f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>打开D:\wamp\php\php.ini文件 搜索extension_dir = “ext”，修为如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension_dir &#x3D; &quot;d:&#x2F;wamp&#x2F;php&#x2F;ext&#x2F;&quot;</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-dc2b2ce9146449df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>进入 D:\wamp\Apache24\htdocs 目录创建1.php文件写入以下内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">       phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li>
<li>重启apache，浏览器里打开<a href="http://localhost/1.php" target="_blank" rel="noopener">http://localhost/1.php</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-b685970ed63dd174.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
<h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><ol>
<li>进入D:\wamp\mysql，复制my-default.ini文件并改名为my.ini。<br>在D:\wamp\mysql目录下创建data文件夹，打开my.ini修改如下内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basedir &#x3D; D:\wamp\mysql</span><br><span class="line">datadir &#x3D; D:\wamp\mysql\data</span><br><span class="line">port &#x3D; 3306</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-d384cc4bf813ec36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>进入D:\wamp\mysql\bin目录下按着shift键点右键， 在此打开命令窗口，（注意必须以管理员身份打开，否则报错。如果不是管理员请以管理员身份打开cmd并进入D:\wamp\mysql\bin目录）<br>输入以下命令初始化mysql<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --user&#x3D;mysql --console</span><br></pre></td></tr></table></figure>
<strong>记录下红色框内的初始密码（密码前面是没有空格的）</strong><br><img src="http://upload-images.jianshu.io/upload_images/4830242-1b01e55245c22dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>将MySQL添加到系统服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install MySQL</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-26ef216e91241eee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>启动myslq<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-0a257e62125e007e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>进入myslq修改初始密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
更改密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for root@localhost &#x3D; password(&#39;123456&#39;); （注意分号）</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-414ee9eaa7a8b074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>创建其他用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;用户名&#39;@&#39;%&#39; IDENTIFIED BY &#39;密码&#39;;</span><br></pre></td></tr></table></figure>
添加访问ip，%号代表所有IP都能访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT GRANT OPTION ON *.* TO &#39;账号&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>
添加权限(所有权限)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO &#39;账号&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure></li>
<li>mysql 常用命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql     #启动myslq服务</span><br><span class="line">net stop mysql      #停止mysql服务</span><br></pre></td></tr></table></figure>
mysql管理小工具<br>在D:\wamp\mysql目录下新建一个文本粘贴如以下内容<em>(自己也可以修改注意路径)</em><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cls </span><br><span class="line">@ECHO OFF </span><br><span class="line">SET Mysql_PATH&#x3D;D: </span><br><span class="line">SET Mysql_DIR&#x3D;D:\wamp\mysql\bin</span><br><span class="line">color 0a </span><br><span class="line">TITLE Mysql Management  </span><br><span class="line">GOTO MENU </span><br><span class="line">:MENU </span><br><span class="line">CLS </span><br><span class="line">ECHO. </span><br><span class="line">ECHO. * * * *  Mysql Management  * * * * * * * * * * * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 1 启动Mysql * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 2 关闭Mysql * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 3 重启Mysql * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * 4 退 出 * </span><br><span class="line">ECHO. * * </span><br><span class="line">ECHO. * * * * * * * * * * * * * * * * * * * * * * * * </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.请输入选择项目的序号： </span><br><span class="line">set &#x2F;p ID&#x3D; </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;1&quot; GOTO cmd1 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;2&quot; GOTO cmd2 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;3&quot; GOTO cmd3 </span><br><span class="line">IF &quot;%id%&quot;&#x3D;&#x3D;&quot;4&quot; EXIT </span><br><span class="line">PAUSE </span><br><span class="line">:cmd1 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.启动Mysql...... </span><br><span class="line">cd %Mysql_DIR% </span><br><span class="line">net start mysql</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd2 </span><br><span class="line">ECHO. </span><br><span class="line">ECHO.关闭Mysql...... </span><br><span class="line">cd %Mysql_DIR% </span><br><span class="line">net stop mysql</span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU </span><br><span class="line">:cmd3 </span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql </span><br><span class="line">PAUSE </span><br><span class="line">GOTO MENU</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>改名字为   Mysql管理工具.bat   （后缀也要改），然后双击打开(需要管理员权限)</strong><br><img src="http://upload-images.jianshu.io/upload_images/4830242-e16cc5edaaa055d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="增加PHP扩展，以memcache为例（其他扩展大致相仿按需添加）"><a href="#增加PHP扩展，以memcache为例（其他扩展大致相仿按需添加）" class="headerlink" title="增加PHP扩展，以memcache为例（其他扩展大致相仿按需添加）"></a>增加PHP扩展，以memcache为例（其他扩展大致相仿按需添加）</h1><p>（如果是curl扩展需要将php中的libssh2.dll文件复制到apache的bin目录下）<br>php扩展官方地址<a href="http://pecl.php.net/" target="_blank" rel="noopener">http://pecl.php.net/</a></p>
<ol>
<li>下载memcache的DLL文件<em>(注意php版本)</em><br>解压后复制php_memcache.dll文件到D:\wamp\php\ext目录下<br><img src="http://upload-images.jianshu.io/upload_images/4830242-9a876439b6b23322.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>打开D:\wamp\php\下php.ini文件，添加以下代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension&#x3D;php_memcache.dll</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-e17183d60d1c5a02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>重启Apache2.4浏览器里打开<a href="http://localhost/1.php" target="_blank" rel="noopener">http://localhost/1.php</a><br><img src="http://upload-images.jianshu.io/upload_images/4830242-ab29c9b0f792e560.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>添加服务到开机自动启动（centos7开机自启动nginx，php-fpm）</title>
    <url>/2017/02/24/20170224_%E6%B7%BB%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%88%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%EF%BC%88centos7%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8nginx%EF%BC%8Cphp-fpm%EF%BC%89/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>参考网络上其他人文章。将他人技术文章亲自测试并总结补充。</p>
<h1 id="开机自启动nginx，php-fpm（其他服务类似）"><a href="#开机自启动nginx，php-fpm（其他服务类似）" class="headerlink" title="开机自启动nginx，php-fpm（其他服务类似）"></a>开机自启动nginx，php-fpm（其他服务类似）</h1><p>centos 7以上是用Systemd进行系统初始化的，Systemd 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。<br>Systemd服务文件以.service结尾，比如现在要建立nginx为开机启动，如果用yum install命令安装的，yum命令会自动创建nginx.service文件，直接用命令systemcel enable nginx.service设置开机启动即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemcel enable nginx.service</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>源码安装的手动建立nginx.service服务文件</strong></p>
<ol>
<li>在系统服务目录里创建nginx.service文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service</span><br></pre></td></tr></table></figure>
写入以下内容（路径改成自己的）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;nginx</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">ExecReload&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br><span class="line">ExecStop&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx -s quit</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
在系统服务目录里创建php-fpm.service文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;php-fpm.service</span><br></pre></td></tr></table></figure>
写入以下内容（路径改成自己的）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;php-fpm</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;www&#x2F;lnmp&#x2F;php&#x2F;sbin&#x2F;php-fpm</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[Unit]:服务的说明<br>Description:描述服务<br>After:描述服务类别<br>[Service]服务运行参数的设置<br>Type=forking是后台运行的形式<br>ExecStart为服务的具体运行命令<br>ExecReload为重启命令<br>ExecStop为停止命令<br>PrivateTmp=True表示给服务分配独立的临时空间<br>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</p>
</blockquote>
</li>
<li>测试并加入开机自启</li>
</ol>
<p><strong>先关闭nginx，php-fpm</strong><br>使用以下命令开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service             #如果服务是开启状态，使用此命令会启动失败。</span><br><span class="line">systemctl start php-fpm.service</span><br></pre></td></tr></table></figure>
<p>开启成功，将服务加入开机自启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx.service                #注意后面不能跟空格</span><br><span class="line">systemctl enable php-fpm.service</span><br></pre></td></tr></table></figure>
<p>重启服务器，查看是否启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutdown -r now        #重启</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl list-units --type&#x3D;service           #查看运行的服务</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-75efe21468a3df0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>3. 其他命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service              #启动nginx服务</span><br><span class="line">systemctl enable nginx.service             #设置开机自启动</span><br><span class="line">systemctl disable nginx.service            #停止开机自启动</span><br><span class="line">systemctl status nginx.service             #查看服务当前状态</span><br><span class="line">systemctl restart nginx.service　          #重新启动服务</span><br><span class="line">systemctl list-units --type&#x3D;service        #查看所有已启动的服务</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx+php+MySql(centos7安装包安装)</title>
    <url>/2017/02/24/20170224_Nginx+php+MySql(centos7%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85)/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>亲测原稿。以  <code>/www/lnmp</code> 目录为例<em>（实际目录可自行更改）</em></p>
<h1 id="安装编译器如果已经有跳过"><a href="#安装编译器如果已经有跳过" class="headerlink" title="安装编译器如果已经有跳过"></a>安装编译器如果已经有跳过</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure>
<p><strong>防火墙开启</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent      #添加开启端口，要开启80；3306；9000；端口</span><br><span class="line">systemctl restart firewalld.service                           #重启防火墙</span><br><span class="line">systemctl stop firewalld                                      #禁用防火墙(防火墙全部关闭)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="源码包下载"><a href="#源码包下载" class="headerlink" title="源码包下载"></a>源码包下载</h1><p>将软件包下载到服务器自定义路径（/www/software）</p>
<blockquote>
<p>Nginx官网 ：<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a><br>  PHP官网：<a href="http://www.php.net/" target="_blank" rel="noopener">http://www.php.net/</a><br>  MySql官网：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p>
</blockquote>
<!-- more -->
<p>本教程使用软件</p>
<blockquote>
<p>nginx-1.11.6.tar.gz<br>  php-5.6.28.tar.gz<br>  mysql-5.7.16-1.el7.x86_64.rpm-bundle.tar<br>（最后面的版本号更改可直接下载）<br><a href="http://nginx.org/download/nginx-1.13.9.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.13.9.tar.gz</a><br><a href="https://www.php.net/distributions/php-7.1.15.tar.gz" target="_blank" rel="noopener">https://www.php.net/distributions/php-7.1.15.tar.gz</a><br><a href="https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar" target="_blank" rel="noopener">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</a></p>
</blockquote>
<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><ol>
<li><p>进入安装包目录。解压nginx-1.11.6.tar.gz安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;software</span><br><span class="line">sudo tar zxfv nginx-1.11.6.tar.gz</span><br><span class="line">cd nginx-1.11.6&#x2F;</span><br><span class="line">sudo .&#x2F;configure --prefix&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx --with-http_ssl_module   将nginx安装在&#x2F;www&#x2F;lnmp目录下</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>其他配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx                   \</span><br><span class="line">--sbin-path&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx           \</span><br><span class="line">--conf-path&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;conf&#x2F;nginx.conf     \</span><br><span class="line">--pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.pid         \</span><br><span class="line">--lock-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.lock       \</span><br><span class="line">--error-log-path&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;log&#x2F;error.log \</span><br><span class="line">--http-log-path&#x3D;&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;log&#x2F;access.log \</span><br><span class="line">--with-http_gzip_static_module        \</span><br><span class="line">--with-http_stub_status_module        \</span><br><span class="line">--with-http_ssl_module                \</span><br><span class="line">--with-pcre                           \</span><br><span class="line">--with-file-aio                       \</span><br><span class="line">--with-http_realip_module             \</span><br><span class="line">--without-http_scgi_module            \</span><br><span class="line">--without-http_uwsgi_module           \</span><br><span class="line">--without-http_fastcgi_module</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入nginx/sbin目录启动nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin</span><br><span class="line">sudo .&#x2F;nginx                 #注意防火墙端口是否开启</span><br><span class="line">sudo .&#x2F;nginx -s reload            # 重新载入配置文件</span><br><span class="line">sudo .&#x2F;nginx -s reopen            # 重启 Nginx</span><br><span class="line">sudo .&#x2F;nginx -s stop              # 停止 Nginx</span><br></pre></td></tr></table></figure></li>
<li><p>访问域名</p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-7d27e7e02e46bcd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><ol>
<li>安装相关依赖（如果已经有跳过）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install cmake ncurses ncurses-devel bison bison-devel boost boost-devel</span><br></pre></td></tr></table></figure></li>
<li>进入安装包目录<em>(删掉有冲突的：mysql-community-server-minimal-5.7.16-1.el7.x86_64.rpm)</em><br>将下载的mysql解压，使用yum安装，（省去很多依赖问题）<br>官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;software&#x2F;mysql-5.7.16-1.el7.x86_64.rpm-bundle&#x2F;</span><br><span class="line">sudo yum install mysql-community-&#123;server,client,common,libs&#125;-* mysql-5.* </span><br><span class="line">rm -rf mysql-community-server-minimal-5.7.16-1.el7.x86_64.rpm         #删掉冲突的重新执行上一条命令</span><br></pre></td></tr></table></figure>
遇到依赖问题。可尝试以下命令<em>（只遇到过一次。其余安装没出现过这个问题的错误）</em><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove mysql-libs</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>启动mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysqld start	                 #启动myslq，记录启动后密码</span><br><span class="line">sudo service mysqld stop	                  #停止</span><br><span class="line">sudo service mysqld restart                   #重启</span><br><span class="line">sudo service mysqld status			   #查看状态</span><br><span class="line">sudo grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log		#如果启动后忘记密码可用此方法查看</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-3f7aa85e9ea6388f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>3. 进入mysql并修改初始密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;密码&#39;;      #密码大写加小写加数字</span><br></pre></td></tr></table></figure>
<p><strong>忘记密码mysqld.log中密码或者mysqld.log为空的解决办法</strong><br>1).修改配置文件my.cfg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;my.cnf</span><br><span class="line">#找到mysqld在之后添加</span><br><span class="line">skip-grant-tables </span><br><span class="line">保存退出</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-138f67b143764297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2).重启[MySQL]服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>
<p>3).直接登陆mysql而不需要密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p   #(直接点击回车)</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-936864aa7c4f45a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>4).修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string&#x3D;password(&#39;密码&#39;) where user&#x3D;&#39;root&#39;; </span><br><span class="line">exit;       #退出</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-1b16a8ebdd6c2cb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>5).修改配置文件my.cfg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;my.cnf</span><br><span class="line">#去掉刚才加的</span><br><span class="line">skip-grant-tables </span><br><span class="line">保存退出</span><br><span class="line">service mysqld restart    #重启myslq</span><br><span class="line">mysql -uroot -p            #输入密码登录</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建其他用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;用户名&#39;@&#39;%&#39; IDENTIFIED BY &#39;密码&#39;;</span><br></pre></td></tr></table></figure>
添加访问ip，%号代表所有IP都能访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT GRANT OPTION ON *.* TO &#39;账号&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>
添加权限(所有权限)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO &#39;账号&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><ol>
<li>安装相关依赖（如果已经有跳过）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libxml2</span><br><span class="line">yum install libxml2-devel -y</span><br><span class="line">yum -y install libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel</span><br><span class="line">yum -y install curl-devel</span><br><span class="line">yum -y install libxslt-devel</span><br></pre></td></tr></table></figure></li>
<li>进入安装包目录。解压php-5.6.28.tar.gz安装包， <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar zxfv php-5.6.28.tar.gz</span><br><span class="line">cd php-5.6.28&#x2F;</span><br></pre></td></tr></table></figure>
php安装配置(按需要配置)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;www&#x2F;lnmp&#x2F;php \</span><br><span class="line">--with-config-file-path&#x3D;&#x2F;www&#x2F;lnmp&#x2F;php&#x2F;etc \</span><br><span class="line"> --with-curl \</span><br><span class="line"> --with-freetype-dir \</span><br><span class="line"> --with-gd \</span><br><span class="line"> --with-gettext \</span><br><span class="line"> --with-iconv-dir \</span><br><span class="line"> --with-kerberos \</span><br><span class="line"> --with-libdir&#x3D;lib64 \</span><br><span class="line"> --with-libxml-dir \</span><br><span class="line"> --with-mysqli \</span><br><span class="line"> --with-openssl \</span><br><span class="line"> --with-pcre-regex \</span><br><span class="line"> --with-pdo-mysql \</span><br><span class="line"> --with-pdo-sqlite \</span><br><span class="line"> --with-pear \</span><br><span class="line"> --with-png-dir \</span><br><span class="line"> --with-xmlrpc \</span><br><span class="line"> --with-xsl \</span><br><span class="line"> --with-zlib \</span><br><span class="line">--with-zlib-dir \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-openssl-dir \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--enable-gd-jis-conv \</span><br><span class="line"> --enable-fpm \</span><br><span class="line"> --enable-bcmath \</span><br><span class="line"> --enable-libxml \</span><br><span class="line"> --enable-inline-optimization \</span><br><span class="line"> --enable-gd-native-ttf \</span><br><span class="line"> --enable-mbregex \</span><br><span class="line"> --enable-mbstring \</span><br><span class="line"> --enable-opcache \</span><br><span class="line"> --enable-pcntl \</span><br><span class="line"> --enable-shmop \</span><br><span class="line"> --enable-soap \</span><br><span class="line"> --enable-sockets \</span><br><span class="line"> --enable-sysvsem \</span><br><span class="line"> --enable-xml \</span><br><span class="line"> --enable-zip</span><br></pre></td></tr></table></figure></li>
</ol>
<p><em>（如果配置错误，需要安装相应的模块，直接yum一并安装依赖库）</em><br>编译安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>复制php.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp php.ini-production  &#x2F;www&#x2F;lnmp&#x2F;php&#x2F;etc&#x2F;php.ini</span><br></pre></td></tr></table></figure>
<p>配置php-fpm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;lnmp&#x2F;php&#x2F;etc</span><br><span class="line">cp  php-fpm.conf.default  php-fpm.conf</span><br><span class="line">vi php-fpm.conf</span><br></pre></td></tr></table></figure>
<p>修改-开启如下几行，即去掉前面的分号(;)【php7.0+配置稍微不一样】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pid &#x3D; run&#x2F;php-fpm.pid</span><br><span class="line">error_log &#x3D; log&#x2F;php-fpm.log</span><br><span class="line">log_level &#x3D; notice</span><br><span class="line">listen &#x3D; 127.0.0.1:9000</span><br><span class="line">listen.allowed_clients &#x3D; 127.0.0.1</span><br><span class="line">pm &#x3D; dynamic</span><br><span class="line">pm.max_children &#x3D; 50       #静态方式下开启的php-fpm进程数量,根据机器内存确定，基本上一个进程需要30M，100个，就是3000M</span><br><span class="line">pm.start_servers &#x3D; 5       #动态方式下的起始php-fpm进程数量。</span><br><span class="line">pm.min_spare_servers &#x3D; 5   #动态方式空闲状态下的最小php-fpm进程数量。</span><br><span class="line">pm.max_spare_servers &#x3D; 35  #动态方式空闲状态下的最大php-fpm进程数量。</span><br><span class="line">pm.max_requests &#x3D; 500      #每个子进程重生之前服务的请求数,如果设置为 &#39;0&#39; 则一直接受请求。</span><br><span class="line">env[HOSTNAME] &#x3D; $HOSTNAME</span><br><span class="line">env[PATH] &#x3D; &#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin</span><br><span class="line">env[TMP] &#x3D; &#x2F;tmp</span><br><span class="line">env[TMPDIR] &#x3D; &#x2F;tmp</span><br><span class="line">env[TEMP] &#x3D; &#x2F;tmp</span><br></pre></td></tr></table></figure>
<p>php7.0+配置端口等信息在<a href="http://www.conf这个配置文件中" target="_blank" rel="noopener">www.conf这个配置文件中</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;lnmp&#x2F;php&#x2F;etc&#x2F;php-fpm.d&#x2F;</span><br><span class="line">cp www.conf.default www.conf</span><br></pre></td></tr></table></figure>
<p>wq保存退出<br>启动php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;www&#x2F;lnmp&#x2F;php&#x2F;sbin&#x2F;php-fpm</span><br><span class="line">netstat -antpl         &#x2F;&#x2F;(如果看到9000端口，PHP-FPM配置成功)</span><br></pre></td></tr></table></figure>
<p>关闭php-fpm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill 进程pid  或者kill -9 $(pidof php-fpm)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>nginx配置修改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;conf</span><br><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#thinkphp 支持</span><br><span class="line">server &#123;</span><br><span class="line">	listen	80;</span><br><span class="line">	server_name  localhost;</span><br><span class="line">	root   &#x2F;www&#x2F;wwwroot;</span><br><span class="line">	index  index.html index.htm index.php;</span><br><span class="line">	error_page  404	&#x2F;404.html;</span><br><span class="line">	location &#x3D; &#x2F;404.html &#123;</span><br><span class="line">		return 404 &#39;Sorry, File not Found!&#39;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location &#x2F; &#123;</span><br><span class="line">		try_files $uri @rewrite;</span><br><span class="line">	&#125;</span><br><span class="line">	location @rewrite &#123;</span><br><span class="line">		set $static 0;</span><br><span class="line">		if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) &#123;</span><br><span class="line">			set $static 1;</span><br><span class="line">		&#125;</span><br><span class="line">		if ($static &#x3D; 0) &#123;</span><br><span class="line">			rewrite ^&#x2F;(.*)$ &#x2F;index.php?s&#x3D;&#x2F;$1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">	location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">		root   html;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ &#x2F;Uploads&#x2F;.*\.php$ &#123;</span><br><span class="line">		deny all;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ \.php&#x2F; &#123;</span><br><span class="line">	   if ($request_uri ~ ^(.+\.php)(&#x2F;.+?)($|\?)) &#123; &#125;</span><br><span class="line">	   fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">	   include fastcgi_params;</span><br><span class="line">	   fastcgi_param SCRIPT_NAME     $1;</span><br><span class="line">	   fastcgi_param PATH_INFO       $2;</span><br><span class="line">	   fastcgi_param SCRIPT_FILENAME $document_root$1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ \.php$ &#123;</span><br><span class="line">		fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">		fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">		include        fastcgi_params;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	location ~ &#x2F;\.ht &#123;</span><br><span class="line">		deny  all;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
重启nginx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload         #重新载入配置文件</span><br><span class="line">&#x2F;www&#x2F;lnmp&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reopen         #重新启动nginx</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>报以下错时，解决办法编译nginx时 不要配置without-http_fastcgi_module</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx: [emerg] unknown directive &quot;fastcgi_pass&quot; in</span><br></pre></td></tr></table></figure>

<h1 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h1><ol>
<li><p>新建一个文本并改名为1.php<br>粘贴以下内容并放入项目目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> **php信息 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问域名下的1.php<br><img src="http://upload-images.jianshu.io/upload_images/4830242-5f02b406d2d630b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ol>
<h1 id="增加PHP扩展，以ftp为例（其他扩展大致相仿按需添加）"><a href="#增加PHP扩展，以ftp为例（其他扩展大致相仿按需添加）" class="headerlink" title="增加PHP扩展，以ftp为例（其他扩展大致相仿按需添加）"></a>增加PHP扩展，以ftp为例（其他扩展大致相仿按需添加）</h1><p>php扩展官方地址<a href="http://pecl.php.net/" target="_blank" rel="noopener">http://pecl.php.net/</a></p>
<ol>
<li>进入要安装的模块目录中，并调用已经编译好的php里面的phpize：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;www&#x2F;software&#x2F;php-5.6.28&#x2F;ext&#x2F;ftp       #进入源代码中要添加的扩展目录中</span><br><span class="line"> &#x2F;www&#x2F;lnmp&#x2F;php&#x2F;bin&#x2F;phpize                  #打开phpize</span><br><span class="line">.&#x2F;configure --with-php-config&#x3D;&#x2F;www&#x2F;lnmp&#x2F;php&#x2F;bin&#x2F;php-config   </span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li>编译之后，自动把ftp.so放到了默认的php扩展目录下我的为 /www/lnmp/php/lib/php/extensions/no-debug-non-zts-20131226<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config --extension-dir    #查看默认的php扩展目录</span><br></pre></td></tr></table></figure></li>
<li>修改php.ini 默认路径为 extension_dir=”/www/lnmp/php/lib/php/extensions/no-debug-non-zts-20131226”<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;www&#x2F;lnmp&#x2F;php&#x2F;lib&#x2F;php.ini</span><br></pre></td></tr></table></figure>
找到extension_dir修改为（约732行）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension_dir&#x3D;&quot;&#x2F;www&#x2F;lnmp&#x2F;php&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20131226&quot;</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-0a6ae72297bbc2de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>在下面添加添加以下代码（约924行）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension &#x3D; ftp.so</span><br></pre></td></tr></table></figure>
<img src="http://upload-images.jianshu.io/upload_images/4830242-f35c58261271a3e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
<li>重启php-fpm<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 $(pidof php-fpm)</span><br><span class="line">&#x2F;www&#x2F;lnmp&#x2F;php&#x2F;sbin&#x2F;php-fpm</span><br></pre></td></tr></table></figure></li>
<li>访问域名下的1.php验证<br><img src="http://upload-images.jianshu.io/upload_images/4830242-6f4bfa01d13ec73c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
<p>####（填坑）<br>使用php mcrypt 前必须先安装Libmcrypt<br>libmcrypt源码安装方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget ftp:&#x2F;&#x2F;mcrypt.hellug.gr&#x2F;pub&#x2F;crypto&#x2F;mcrypt&#x2F;attic&#x2F;libmcrypt&#x2F;libmcrypt-2.5.7.tar.gz</span><br><span class="line">tar -zxvf libmcrypt-2.5.7.tar.gz</span><br><span class="line">cd libmcrypt-2.5.7</span><br><span class="line">.&#x2F;configure  –prefix&#x3D;&#x2F;usr&#x2F;local</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p> 运行/www/lnmp/php/bin/phpize时出现：</p>
<blockquote>
<p>Configuring for:<br>PHP Api Version:         20041225<br>Zend Module Api No:      20060613<br>Zend Extension Api No:   220060519<br>Cannot find autoconf. Please check your autoconf installation and the<br>$PHP_AUTOCONF environment variable. Then, rerun this script.</p>
</blockquote>
<p>简单解决办法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install m4</span><br><span class="line">yum install autoconf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>git安装配置</title>
    <url>/2017/02/22/20170222_git%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>参考网络上其他人文章。将他人技术文章亲自测试并总结补充。</p>
<h1 id="CentOS-7下安装git"><a href="#CentOS-7下安装git" class="headerlink" title="CentOS 7下安装git"></a>CentOS 7下安装git</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum -y install git-core</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-ead2fc5e1a3382e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="Git-基本使用"><a href="#Git-基本使用" class="headerlink" title="Git 基本使用"></a>Git 基本使用</h1><ul>
<li><h4 id="创建目录作为Git仓库并初始化。"><a href="#创建目录作为Git仓库并初始化。" class="headerlink" title="创建目录作为Git仓库并初始化。"></a>创建目录作为Git仓库并初始化。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;git                      #在根目录创建git文件夹</span><br><span class="line">chmod -R 777 &#x2F;git               #更改目录权限</span><br><span class="line">cd &#x2F;git                         #进入git目录</span><br><span class="line">git init                        #初始化，该命令执行完后会在当前目录生成一个 .git 目录。</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="克隆项目-amp-拉取"><a href="#克隆项目-amp-拉取" class="headerlink" title="克隆项目&amp;拉取"></a>克隆项目&amp;拉取</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@192.168.100.100:&#x2F;home&#x2F;gitrepo&#x2F;runoob.git &#x2F;git&#x2F;test    #克隆到&#x2F;git&#x2F;test 目录，不写为当前目录。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull             #拉取更新 需要进入已克隆的项目</span><br></pre></td></tr></table></figure></li>
<li><h4 id="创建git服务空间"><a href="#创建git服务空间" class="headerlink" title="创建git服务空间"></a>创建git服务空间</h4></li>
</ul>
<p>1.创建一个git用户组和用户，用来运行git服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd git              #添加git用户组</span><br><span class="line">adduser git -g git        #添加git用户到git用户组</span><br><span class="line">passwd git                #设置git用户密码</span><br></pre></td></tr></table></figure>
<p>2.创建证书登录<br>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。<br>如果没有该文件创建它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;git&#x2F;</span><br><span class="line">mkdir .ssh</span><br><span class="line">chmod 700 .ssh</span><br><span class="line">touch .ssh&#x2F;authorized_keys</span><br><span class="line">chmod 600 .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>
<p>3.初始化Git仓库<br>首先我们选定一个目录作为Git仓库，<em>(假定是/home/gitrepo/runoob.git)</em> 在/home/gitrepo目录下输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home</span><br><span class="line">mkdir gitrepo</span><br><span class="line">chown git:git gitrepo&#x2F;</span><br><span class="line">cd gitrepo</span><br><span class="line">$ git init --bare runoob.git</span><br></pre></td></tr></table></figure>
<p>以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R git:git runnoob.git</span><br></pre></td></tr></table></figure>
<p>4.克隆仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@192.168.100.100:&#x2F;home&#x2F;gitrepo&#x2F;runoob.git</span><br></pre></td></tr></table></figure>
<p>Git 服务器安装就完成，可以禁用 git 用户通过shell登录，可以通过编辑/etc/passwd文件完成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p>找到类似下面的一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git:x:503:503::&#x2F;home&#x2F;git:&#x2F;bin&#x2F;bash</span><br><span class="line">改为：</span><br><span class="line">git:x:503:503::&#x2F;home&#x2F;git:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>
<p>最后运行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -s &#x2F;bin&#x2F;bash git    #改完以后不运行克隆项目会失败</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>VM中centos7设置固定ip</title>
    <url>/2017/02/20/20170220_VM%E4%B8%ADcentos7%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9Aip/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>参考网络上其他人文章。将他人技术文章亲自测试并总结补充。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>虚拟机中，centOS通过NAT连接，设置固定IP上网。</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-329a610137adbcee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>本地主机 VMware Network Adapter VMnet8  状态信息：<br><img src="http://upload-images.jianshu.io/upload_images/4830242-e379dc84ea23c7b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>依次修改以下三个文件：（多余字符去掉（包括注释、空格））【将三个文件备份一下，以免改错。然后修改文件，可将原有信息清空】</strong></p>
<blockquote>
<p>/etc/sysconfig/network<br>/etc/sysconfig/network-scripts/ifcfg-eno16777736<br>/etc/resolv.conf</p>
</blockquote>
<h2 id="1-etc-sysconfig-network"><a href="#1-etc-sysconfig-network" class="headerlink" title="1. /etc/sysconfig/network"></a>1. /etc/sysconfig/network</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NETWORKING&#x3D;yes</span><br><span class="line">NETWORKING_IPV6&#x3D;no</span><br><span class="line">HOSTNAME&#x3D;WKM              #主机名</span><br><span class="line">GATEWAY&#x3D;192.168.110.2     #默认网关</span><br></pre></td></tr></table></figure>

<h2 id="2-etc-sysconfig-network-scripts-ifcfg-eno16777736"><a href="#2-etc-sysconfig-network-scripts-ifcfg-eno16777736" class="headerlink" title="2./etc/sysconfig/network-scripts/ifcfg-eno16777736"></a>2./etc/sysconfig/network-scripts/ifcfg-eno16777736</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE&#x3D;eno16777736                #设备名称【设备名称为自己虚拟机网卡名可以ifconfig查看】</span><br><span class="line">NETMASK&#x3D;255.255.255.0             #子网掩码</span><br><span class="line">IPADDR&#x3D;192.168.110.10             #IP地址</span><br><span class="line">BOOTPROTO&#x3D;static                  #【none|static|bootp|dhcp】引导时不使用协议|静态分配|BOOTP协议|DHCP协议</span><br><span class="line">ONBOOT&#x3D;yes                        #【yes|no】引导时是否激活设备</span><br><span class="line">GATEWAY&#x3D;192.168.110.2</span><br><span class="line">PEERDNS&#x3D;yes</span><br></pre></td></tr></table></figure>

<h2 id="3-重启生效（有必要的话，重启系统生效）"><a href="#3-重启生效（有必要的话，重启系统生效）" class="headerlink" title="3.重启生效（有必要的话，重启系统生效）"></a>3.重启生效（有必要的话，重启系统生效）</h2><p>停止IP地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;ifdown eno16777736</span><br></pre></td></tr></table></figure>
<p>使IP地址生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;ifup eno16777736</span><br></pre></td></tr></table></figure>
<p>查看更新状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4830242-dbf566b74c63adad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="4-修改-etc-resolv-conf"><a href="#4-修改-etc-resolv-conf" class="headerlink" title="4.修改/etc/resolv.conf"></a>4.修改/etc/resolv.conf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search localdomain</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 192.168.110.1</span><br></pre></td></tr></table></figure>
<p>通知网关更新信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;network restart</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/4830242-163a3a14c66c82d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>ok修改成功</strong></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
</search>
